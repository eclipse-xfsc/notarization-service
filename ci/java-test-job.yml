test-services:
  extends: .podman-java-cached
  stage: test
  # Only for testing purposes
  variables:
    POSTGRES_DB: "test"
    POSTGRES_USER: "quarkus"
    POSTGRES_PASSWORD: "quarkus"
  services:
    - name: postgres:14.1
      alias: postgres
  needs:
    - compile-services
  cache:
    - key: "$JAVA_CACHE_KEY"
      paths: !reference [ .cache-gradle-base, paths ]
      policy: pull
    - key: "$JAVA_TMP_CACHE_KEY"
      paths: [ .cache-gradle-builds, paths ]
      policy: pull
  script:
    - IN_CI_ENV=true
      QUARKUS_DATASOURCE_DEVSERVICES_ENABLED=false
      QUARKUS_DATASOURCE_REACTIVE_URL=postgresql://postgres:5432/test
      QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://postgres:5432/test
      QUARKUS_DATASOURCE_USERNAME=quarkus
      QUARKUS_DATASOURCE_PASSWORD=quarkus
      QUARKUS_KEYCLOAK_DEVSERVICES_ENABLED=false
      ./gradlew --full-stacktrace -Dtest.ignoreFailures=true check
    - ./scripts/aggregate-requirement-report.sh
  allow_failure: false
  artifacts:
    paths:
    - "services/**/build/jacoco-report/jacoco.xml"
    - "services/**/build/test-results/test/TEST-*.xml"
    - "libs/**/build/jacoco-report/jacoco.xml"
    - "libs/**/build/test-results/test/TEST-*.xml"
    - "**/build/reports/requirements/*.csv"
    - "build/reports/requirements/aggregate.csv"
    reports:
      junit:
        - services/**/build/test-results/test/TEST-*.xml
        - libs/**/build/test-results/test/TEST-*.xml

coverage-report-java:
  stage: test
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.10
  needs:
    - test-services
  dependencies:
    - test-services
  script:
    # convert report from jacoco to cobertura
    - |
      cd services/

      for SERVICE in *; do
        if test -d $SERVICE/build/jacoco-report/; then
          if test -d $SERVICE/src/main/java; then
            ROOT_SOURCE=$SERVICE/src/main/java/
          else
            ROOT_SOURCE=$SERVICE/src/main/kotlin/
          fi
          python /opt/cover2cover.py $SERVICE/build/jacoco-report/jacoco.xml $ROOT_SOURCE > $SERVICE/build/jacoco-report/cobertura.xml
        fi
      done
      cd ../libs/

      for LIBRARY in *; do
        if test -d $LIBRARY/build/reports/jacoco/test; then
          if test -d $LIBRARY/src/main/java; then
            ROOT_SOURCE=$LIBRARY/src/main/java/
          else
            ROOT_SOURCE=$LIBRARY/src/main/kotlin/
          fi
          python /opt/cover2cover.py $LIBRARY/build/reports/jacoco/test/jacocoTestReport.xml $ROOT_SOURCE > $LIBRARY/build/reports/cobertura.xml
        fi
      done
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "**/build/**/cobertura.xml"
  allow_failure: true
