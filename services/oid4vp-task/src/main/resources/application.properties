quarkus.application.name=oid4vp-task
quarkus.http.port=8093

# Assign random port by the OS for tests
quarkus.http.test-port = 0
#%test.quarkus.log.level=DEBUG

# logging
quarkus.log.level=WARN

%dev,test.quarkus.log.category.\"eu.xfsc.not.oid4vp\".level=DEBUG
%dev,test.quarkus.http.access-log.enabled=true

%dev,test.quarkus.rest-client.logging.scope=request-response
%dev,test.quarkus.rest-client.logging.body-limit=1500
%dev,test.quarkus.log.category.\"org.jboss.resteasy.reactive.client.logging\".level=DEBUG

# OpenAPI
quarkus.smallrye-openapi.store-schema-directory = deploy/openapi
mp.openapi.extensions.smallrye.remove-unused-schemas.enable=true
mp.openapi.schema.com.fasterxml.jackson.databind.JsonNode={ "name": "AnyType", "type": "object" }
mp.openapi.scan.exclude.packages=eu.gaiax.notarization.api.profile

## Database
quarkus.datasource.db-kind=postgresql

#quarkus.hibernate-orm.log.sql=true
#quarkus.hibernate-orm.database.generation=none
quarkus.flyway.migrate-at-start=false
quarkus.flyway.locations = db-flyway

%dev,test.quarkus.flyway.migrate-at-start=true
%dev,test.quarkus.flyway.clean-at-start=true


## Cache
#quarkus.cache.caffeine."supported-credentials".expire-after-write = 60s


# OpenTelemtry
#quarkus.otel.exporter.otlp.traces.endpoint=http://localhost:4317
#quarkus.otel.exporter.otlp.traces.headers=Authorization=Bearer my_secret

# Container image
quarkus.container-image.builder=jib
quarkus.container-image.registry=node-654e3bca7fbeeed18f81d7c7.ps-xaas.io
quarkus.container-image.group=not
quarkus.container-image.tag=latest-dev
quarkus.container-image.name=${quarkus.application.name}

# Kubernetes integration configuration
quarkus.kubernetes.part-of=notarization-system
quarkus.kubernetes.name=${quarkus.application.name}

quarkus.kubernetes.readiness-probe.initial-delay=20s
quarkus.kubernetes.readiness-probe.period=45s


# DID resolver and registrar
gaia-x.did.useUniResolver = false
#gaia-x.did.resolver.url = https://dev.uniresolver.io/1.0
#gaia-x.did.registrar.url = https://uniregistrar.io/1.0

# AcaPy OpenAPI Generator config
quarkus.openapi-generator.codegen.spec.tcr_openapi_yaml.base-package=openapi.train
quarkus.openapi-generator.codegen.spec.tcr_openapi_yaml.config-key=train_api

# rest client config
#%dev,test.quarkus.rest-client.train_api.url = https://tcr.train1.xfsc.dev/tcr/v1
#%dev,test.quarkus.rest-client.train_api.url = http://localhost:8094/tcr/v1
%dev,test.quarkus.rest-client.profile_api.url = http://localhost:8093/


gaia-x.oid4vp.client.client-id = ${gaia-x.oid4vp.base-url}


# JWT config
smallrye.jwt.new-token.issuer     = ${gaia-x.oid4vp.client.client-id}
mp.jwt.verify.issuer              = ${gaia-x.oid4vp.client.client-id}
smallrye.jwt.new-token.lifespan   = 300
gaia-x.oid4vp.request-object-lifetime = PT5M

# we are not dealing with identity tokens, so disable the claim validation for that
smallrye.jwt.require.named-principal = false



%dev,test.gaia-x.oid4vp.base-url = https://localhost:${quarkus.http.port}/
%dev,test.gaia-x.oid4vp.finish-redirect-uri = https://localhost:${quarkus.http.port}/finished

%dev,test.quarkus.cache.enabled = false


#
# JWT config
#

# EC key verification
%dev,test.smallrye.jwt.sign.key.location    = classpath:/demo_keys/sign_jwks.json
%dev,test.smallrye.jwt.sign.key.id          = s_es256

%dev,test.mp.jwt.verify.publickey.location  = classpath:/demo_keys/verify_jwks.json
%dev,test.mp.jwt.verify.publickey.algorithm = ES256


%dev,test.gaia-x.oid4vp.client.client-id         = localhost
%dev,test.gaia-x.oid4vp.client.scheme            = x509_san_dns
%dev,test.gaia-x.oid4vp.client.jws-alg           = ES512
%dev,test.gaia-x.oid4vp.client.keystore.location = classpath:/demo_keys/oid-client.jks
%dev,test.gaia-x.oid4vp.client.keystore.alias    = client-key-dns
%dev,test.gaia-x.oid4vp.client.keystore.password = 123456
