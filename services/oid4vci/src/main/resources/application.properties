quarkus.application.name=oid4vci
quarkus.http.port=8088

# Assign random port by the OS for tests
quarkus.http.test-port = 0
#%test.quarkus.log.level=DEBUG

#quarkus.log.level = DEBUG
%prod.quarkus.log.level=WARN
%dev,test.quarkus.http.access-log.enabled=true


## Database
quarkus.datasource.db-kind=postgresql

#quarkus.hibernate-orm.log.sql=true
#quarkus.hibernate-orm.database.generation=none
quarkus.flyway.migrate-at-start=false
quarkus.flyway.locations = db-flyway

%dev,test.quarkus.flyway.migrate-at-start=true
%dev,test.quarkus.flyway.clean-at-start=true

# OpenAPI
quarkus.smallrye-openapi.store-schema-directory = deploy/openapi
mp.openapi.extensions.smallrye.remove-unused-schemas.enable=true
mp.openapi.schema.com.fasterxml.jackson.databind.JsonNode={ "name": "AnyType", "type": "object" }
mp.openapi.scan.exclude.packages=eu.gaiax.notarization.api.profile

## Cache
quarkus.cache.caffeine."supported-credentials".expire-after-write = 60s


# OpenTelemtry
#quarkus.otel.exporter.otlp.traces.endpoint=http://localhost:4317
#quarkus.otel.exporter.otlp.traces.headers=Authorization=Bearer my_secret

# Container image
quarkus.container-image.builder=jib
quarkus.container-image.registry=node-654e3bca7fbeeed18f81d7c7.ps-xaas.io
quarkus.container-image.group=not
quarkus.container-image.tag=latest-dev
quarkus.container-image.name=${quarkus.application.name}

# Kubernetes integration configuration
quarkus.kubernetes.part-of=notarization-system
quarkus.kubernetes.name=${quarkus.application.name}

quarkus.kubernetes.readiness-probe.initial-delay=20s
quarkus.kubernetes.readiness-probe.period=45s


# rest client config
%dev.quarkus.rest-client.profile-api.url = http://localhost:8083/


# JWT config
smallrye.jwt.new-token.issuer     = ${gaia-x.oid4vci.issuer-url}
mp.jwt.verify.issuer              = ${gaia-x.oid4vci.issuer-url}
gaia-x.oid4vci.code-lifetime = PT5M
gaia-x.oid4vci.at-lifetime   = PT30M


# we are not dealing with identity tokens, so disable the claim validation for that
smallrye.jwt.require.named-principal = false
# enable token encryption by default
gaia-x.oid4vci.encrypt-tokens = true
# some JWT defaults
mp.jwt.decrypt.key.algorithm = ECDH-ES,ECDH-ES-A128KW,ECDH-ES-A192KW,ECDH-ES-A256KW,A128GCMKW,A192GCMKW,A256GCMKW



%dev,test.gaia-x.oid4vci.issuer-url = https://localhost:${quarkus.http.port}/

%dev,test.quarkus.cache.enabled = false

%test.gaia-x.oid4vci.issuer-display = [{\
  "name": "Example Credential Issuer",\
  "locale": "en-US",\
  "logo": {\
    "uri": "https://example.com/issuer-logo.png",\
    "alt_text": "Issuer Logo"\
  }\
}]


#
# JWT config
#

#%dev,test.gaia-x.oid4vci.encrypt-tokens     = false

# EC key verification
%dev,test.smallrye.jwt.sign.key.location    = classpath:/demo_keys/sign_jwks.json
%dev,test.smallrye.jwt.sign.key.id          = s_es256

%dev,test.mp.jwt.verify.publickey.location  = classpath:/demo_keys/verify_jwks.json
%dev,test.mp.jwt.verify.publickey.algorithm = ES256

# octet key verification
#%dev,test.smallrye.jwt.verify.key.location  = classpath:/demo_keys/verify_jwks.json
#%dev,test.smallrye.jwt.verify.algorithm     = HS256

# encryption
%dev,test.smallrye.jwt.encrypt.key.location = classpath:/demo_keys/encrypt_jwks.json

# EC key decryption
#%dev,test.mp.jwt.decrypt.key.location       = classpath:/demo_keys/decrypt_es_jwks.json
#%dev,test.smallrye.jwt.encrypt.key.id       = e_es256

# octet key decryption
%dev,test.mp.jwt.decrypt.key.location       = classpath:/demo_keys/decrypt_oct_jwks.json
%dev,test.smallrye.jwt.encrypt.key.id       = e_a256
