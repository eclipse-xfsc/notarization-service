package eu.gaiax.notarization.auto_notary.web.jwt

import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import io.quarkus.test.junit.QuarkusTest
import org.jose4j.jwt.consumer.JwtConsumerBuilder
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import java.math.BigInteger
import java.security.AlgorithmParameters
import java.security.KeyFactory
import java.security.NoSuchAlgorithmException
import java.security.interfaces.ECPrivateKey
import java.security.spec.*
import java.util.*


@QuarkusTest
class JWTDecryptionTest {

    private val decryptionKey = "W9ojMWb5kDpqfmC4K9mcIleVrNexnn3on3aJb-5paB38S5i2CusSRbes0wgwSyPu"

    private val idToken = "eyJhbGciOiJFQ0RILUVTK0EyNTZLVyIsImVuYyI6IkEyNTZHQ00iLCJraWQiOiJDSlZicl9UX3JiZ0FXa1AzVEJxcWJnVE8ydzI3WldmRV9Hc2t5ODhvZGFvIiwiZXBrIjp7Imt0eSI6IkVDIiwieCI6Im1yejFoRUJPVVYxNVl6OXdBR2U2Y1lzYjdGZUVCTWhiWlVIempneWNKeDdoN0xLbXN2OTJsXzNqRDVicmt5bW0iLCJ5IjoiM19yeTd1VXQyWFdjTVFTR0VXM1lUNzcwa1J2NTVXd0tzUTVmQl9lRFdIaVEwaHRpTVhIajAwX2NFdXpCNHltNSIsImNydiI6IlAtMzg0In19.T77xCzfzw9v6AhZCOWypCdZfzeKJf0MpavIG1s48PtCF0rPdniZAqQ.CAQDVtYLiQByaCVJ.ZBWyIq1i0ZIgSGEJA_Z-uFE2DtfM4Gn11RKD8t-nE-np3K9jSRBkgPJ-logLCGD3TGfMmp6UURrmLB14Undo2QBgEng-JJArUYcEWtLmsscnv_uk4WLtzyFRHQPSuMjjU8k8aypEgH24RcMa2cKJyGv2aYeXbq-tcxfJIKqR_cmD9qHoI0ujRRhQ9mtZPrSdALuYgyCnzYRXevTuYl9yJIferKjx9A1QSC4-7S3v866ckvJiaXfiWJ_7Q2xMeDFzE-rvZeH6om2SUQ5bzUjPMqnN29xWk0AbV72EngQNx4Jq2w255V7Gx877816GMvkvxdrpGUSlZKku5xxBOQZb6iUQNRsqcSVYFLuoYKeK3eAPUxu54YgAUW3WaexVH_sGbZWLDbxpY5ug2_m2w7QMUvbnhwjJuIAoUIz4jrfQA7ZsP7NiwbiNJCn1nLbfKV1XX5plmsIJS8t17aE_GMPnuXmPe3wGDyp_NUU44Ln2hVMYlEUIll-1IhdUvAcpKzMfVP3Nlo5F5ZoEKje8ZkJcCdYVBjnBLZgVDcfbIAUh9tsDIwPCTA932VGB9MpKnZ9x4bxaacFdKfwCbZnvrPB00mYHvBzmwBQW7IAK7nDvWs4VOD3iPnoGe-NqIRmvLCgkmoCeGsZ-3La73nMtkoeouTsHRMyQvb2m3pnSXt-6bJl8lDFOOhtWOqX2RvLSgWfz9oqS9oJMeHvLSEQUIhJQzJ8MtDHI20_IVRGTsnvj7gjQBiPjHmhPqNwI4SX4CsoFZ4CsswKhuPUWmOeQzOeIOc216MdmJpJIXCpO03n4PWu7ZqPKi2TNPyW4a-fA1bsK1F_U63QHW3asOxCRTKBfKrhfY_SMiAi5tbBrTrnyAasZaePoZlZPM3zcgwghoicV0m5bfJTysVfu8iZai92qU_Xf9vX3qsGhsX04O466uSryeKElybdE4f2aHw1T74kHOVxyC90JJNIzKFFSDOf2al2RpVw5mC1DXfIY_MZhClHFmu_DWLbvFETRUxg4b2Epq7r267F6jWleeTp-3q7EzldZUJTI8zQLXMwObFbj4gz4bPKll177w9txlBeEQ4mE66kSlWMM0DgOYn5lGhAYHIU64wNboyX8qGDHXxa-685W9aKTOOk9LC1Ltp6XQq-QDWbd5bmSGeI6vP5Thz8PlSDVA1mmn_MmdZPs48HWAXwsOPgIAEW1nSNP9rIdJUfZuqlRb8Y7GceaKB9iLDlK2uvRqTEPLRgtodnSQ1t6kuTfWpe7yE7WMgHzlsyCHzQsKCfhVmagMtP0a5VS6gjvL10JijJiYiG0EN-6K3zJ-GHNgkbYTwFCnMgn4COUgkAhBMDnlZBrAYjgW3K-Qb-Pp9GRqkDqzLEFGNndgj_mht4yxF8_o9vLfGl4GsiNEO8FGAJIxgiomlCAYys4FIuSEoVPiBF13vebqtBOunSDYK5UFPxMdytl4TcDulVWywN8MaTrYb9kd1jyDphWvDzqhaQDjTxUhMz5r4yGFAb6WeAWtbCN9_1QW606y7IEyaWeco4UK7VeE8GS4Vvce3FWl1aLJ-PemqQYxbNrNG0IgejoSMP-PtoGfAGXdaGZz8Jgpq4O1UEuEXTRIaR6PwizGXEtEEFS9ya85DbuufaJ8fDGo9WlDC8cC503o0sqBfTtSXrvmu3SW-6zqVwiC4E_DIuovWWwb3aCFO-nUxcpfpvXpgA7DhFXb1i15fAjr-u7uW2yfByNATC_8eApFGphb5w6Ej-TrCq1qnsNIZ7GhDZZs-Lh_18M5nlp_AlQNE5PSYYgz2dWlVE3Ph-1arV4yYwiwFGCNBTFry3SFXxqzf3oa3t_V6hdxmh4Kqbs88oW-ENPTelpKtLsLfcFdj9_0ZeBhyWGDrQ7hiwXHYDOBo6ze2PEZ8rS9U5B_YzrHu7RS7o6ELPcDW0hwuEoyydVisiyXG9JAAp9deeYGo5tTNUKv0L4ab4CB68t1YRXoydNWdu8bGdeg0NbMwJLfzoojkoHgPACc6ZZN036Rf8tdXpkk3GZB2UYhYWHj8dvk-Ywt-I7XRBCkngRnxoW86Xs_ZOvfadjRkmJw9qZaHmX1HK2Ms0FwSH-ndBR8ZWh58zMX9a_dAm_A0TL_jMm50l0OdMv_EZXZYARM2Xyc6QQE_XuSGG4BzClHZtgeBupFbX-pZMG41IqnFS2a4B8-05g2OeyE_RfAOUWPdJZeM_lN3sSjlQng05fGzvPngEZo-uABE85C15xqOcisUvkFKbq_yfNgzPWTjoqVcZk8OFelOPgZg7NG8ynBfW2s3Hj4Mxht8fQWd9-K0wbSBndZyw7SszF8N8DJt2d6Tr8nlWojGKCed0RMWpykqTLw374FSgfhtqjdViLSsrx6fnCoLPcCtpYFxW1lUMYUybZuVinMEW4n_MJuThr1tjO16hrtqHTIEEME4dLNRY3guZTkX9cpoNOT4fLRQfj7eUJbtnpfIL6iYUuSNAopgjmM0C7BLOOVv6Aho1_aEcm0Hh9HKnfySDBl3MBBGzxRWB0sP2vayFOYQGXm_PLNkt-gCra0LfohtFjpJQ8-30LSZqlzq9ui92E_K3B6_juR-aXY3_HuEzRoM7fdvxR0f2-TPJJf5bg8FwhJSlTyCPRlWoeekQOr2UyyEhhSQyOmcE1nQoSW0exbEhhTvjMHRqOo4Lt5jaIOcCS9swwPLoUmvqMHqJQZcRjSM_jOoXWpEjrEQUsOVAiDlz00qRl_4ghrRTIMV5bV6wvW8_0DyMv6v9fTqqGyfG6oRmXX4RXy9d1OHqWtVpKIfBs_seEdjKw2CsYaKzgz-3uJdgesOmlyB5OEcLkdZEXTPeIsoH7M_Jaf7zSaUuGQPoiYR21JPhWIV8ZUm0lEu9lvbWcGmc-Nql-u0AUN9fYRad_UHaZ7DlsEhlKmbN7gIHP851ckQEpu8-NZ4_CkKtJ79Y06vJzSNHnYcXw5wTj7evSrHXy6UoOIBiaC5gEl-H0WBuBRfHqnkp__gjq9zMqjkKjjhA_AFZdOZoBsNETGMaO-k7oRDxg5slkadqj0S-NkyR1Z6M-kyjdI2sLRbdzvQAdCF3oqPuNpvUR9duDOVuym8kzt79astV6hEv1iADl-8X3GAeIqJWAvzQwdGk2M57nldlwkCvl-ucLoDd4v1Yq34fw_qZNYPrnyIhhTAkHfcgwXAp3gvolE9PIOb9uoEaaujLRkdzkZhzXKyY3naqm9BA83toDQmsOgUuhtORINKz6yMXDQ5UJs6iYpmC2EkC4Vb26xtnMUe4mTvz2ma8oCwA1ElAOq0899UM252MSrjlMBj3mJSMgei9YaWV0TWHLrFxBItzpPIEXLDEoIyXZIs4qAs0GKWZaVLhVz2xD4YfMw6NPRHKoPDtkbs6ySPrWWlmdmKWwQoWyttJi3QTTDu8Y0LRds-ZsDLLAexRKiucXBJGhs9kLEjHVmZrsXmUCtEYbeTH9CvUSYuTU8UsjU4TEdCDJqihPQaQkI82hdISXPElTbuSYAptQ_Z-CcPLKkW7WXH3ykKK9ANMYireY8smNGX18iVWtQqYzOWVemZvc3wV31OaJJcD8d0J8p4KqRTziSVhnEPXHfqYjwuhP2ZHEdTbZdvJFpWBJBpa3DnwwALYXyJ4Q19UTfZML5Pza7qBqum7pnTWY0Yxd2f8M16lGWx82TSG6MroGbiWh8yT7hWzqJT-q0x7IhtLo8lFWVXx2jMVy9h1Q77EN-mYABOR4kyoGcG28y4orgG54f6Dkj6hAu3lOQYq2LoH7K08CzpXbY9ygYDFKFaI2Ufx9-T9qA9YeHy6kL-2ZTipPtRu7HJHwYCbTWJkl4GE0ntaK5UKDPmCDT6M7z4PTYTw1gIsndqZxKHqW22g8Ev8SWEV1LDOS1Qp0zx6RS0ISwaq6KXtLRVnQ3aEAuDRyoSnG-3dWFqBsHmgTz9I392_qNTOemb8rDs0ceKgAHf4FDbm8F-x6kSAH4qGQdb-ar_NH_iMXJJEYb1Kvm50z9ItjQdYbctVbXgg4aqT2-sASNik8oy23Nr15NspPW6r1m9dg_wyogG6zZ6seACuam6pxHrf35-NHz84PB-rP5R_MpBhjTWjNgvXt53GpwGm8a3TrpMaIKJaQFVf4wqFXTQDII6NoHgox_eCzs_2baBOP6XmtRlO2PwK8rZ8kq3Z3kD7e50zmZ4U19iXA6bhq1mxg57fGHPU9j_79qT7BnddEPHuInWUTHiHP0qf3yfI7FFlTF7v2Un5wN6d4LSmek5tHYDy13Gaq1sNbuoaBTzk2TMLA-QgIlwZLIzl-17w4hDfGexMxDtuBNSXqqdnzYz1HU88jK0XeY0wTXk2XBpJrRxlr-CQpH_CLHsoz8Lxdkzfl3VsS4Bp-2OVqd-gTUTGu7N2bfOydnff1WKpq_ysKbLzhFm8sBpRl3LAME5eFEY3kOdkTUwSdrkA0OF-SDBtC6PPPLDBUiFyEohEObFhiNZqAjKHYVeGmP90uZ_l4PxcEWgt42uqlSD2D2nLwqzVY0vUl4WUEqH0noQGzvbeHcI7VFU3lvfRIMOnE-tBmOJqbMcrhZQD2BNlE--roaJHM02ls0xZrDi-ibQBqRMni1ZdNKZnLWKZijdhG57qTchXoBb87-zxQW5u4pdDoM-c7ecgAkFt4sN_xJh2Q7AfiLK2807mZ9ALvUqKj4tf9x2qsbYJ8G0pnZo9sNYJqGwm-StkHYz_Evdpee2Cnud02cAoh-tBvuxj3veToyV4lCv_LXtXthLqLkYGe_fCsci60rpQM0xqxXgsTBX0cfnIgKVgbBX1r32pBf6uRLCygiqRlV0UEH6T4Rn_5qKH_0IzAUJHcg3vvPz63XKqtpzi7BmnvY35uLVJk-DHEx_ZKmyaFknV_TfalVQQUjTdbWNenfe73l3v6_Sq3Far8TshowW3WjJ8gwGu-rWSiW_isMjAX9GnqbjGyi41bHhsDgvAIpfoBLnEZIxH-hVkRyI94ZJHgGCCCvv5dbFtnToi6mnSSTgDTV1JBCKDF8cNkyUltTRPbzo8Tg5ADHvy8IOXu5A6wku_AIBSbGwgCICfWV4G3EX0BwyIWngbUkPDiBWnH5B8d0Fj4Qe83yQicaNTpTh0p1-KSSjRnvvRIKkeIcUsRL_NLM3VIepmKgUVCjJzATs5JZwIQAxKbLRMP7zaYF1hMoVMYpBuYbDWHAa-zt_RYxRWLK7TywHnRW7W8Hj8qpUSmVX8cxRGY-ZpjkLAbTKcDhVzborzX2krPVAZPxPKwg2fXFPTPcS0mocq9lp8vaPnTkjl8c1YPL3m48QXQAaiIhD9JUq1TWa5rq8GTeZqcVyeFbCgroC7bamIOhiiFxub2iR7VJ-ZXlCS4eVETpYAAUKy2s-flkAfPnF2e5VgDT9AGrV9pjru-wXOyLnkW7LTxG7TIHNcUEE8umehBvpKbE3131r_7IdoMUxAgarlbN-h9GXSx5guMZ9iNOx7HmlXfwhJDgFxwFs1mTq3H85ozzcsFpG067zCyMXi9rgdcbeY8wdlRXErvuM7VU8fLlUu1jO0VGddpNxlrPx7Zgev24bmrxpWkpux0hXepIPWKQwMbTVFIN1NGnDlwDyGRdn-rU2OF6WTyEtS3nOhNkiEUP-P3lQBt-mzLIAwG1jN8fTMazkphfx6NqE_b8eIW99kwpP6U9HFR8Q6khWoXG1bO2PiWZoqZi4wZ7u1B8w5M_DNjwK2OFJBOUt0ckKL1yUTiRXegZdVh5LZJ-1zKvVrQOsV4Au1cCNN6uTtzP_HudtjLWHJah4tmxnk5kR0KRIcGt7UNlveH9joVZQYGewwvfNBb8gAEs31M_N8hXRZ5COlYcvz5DZzLK_00MrIvMcOoFJf3jD8bVFZ4r85rcNLshkxR0Hih1zoB52RVujydDwWiy1QuAlWVJvfLagFlbQbOqWhmtfRsvamqi4xAJSEaB7mZunGjd0Zs90wXL_u3hvFrJFe4dwHgTL_6_snNomop01zbTaoI_dIt4raL5sswwIOSBzfR-er08xhyCF175uG4x1n_w8kanxhTMAYKPwMsdNzux3xnMzrzm6LuDpKMdwttzfM6YkoLEO9oApt_u36df-V032a5PS-HYSAUDjL0sjjpn_WpOR2rcmD0kuJB03SLqa6ItBNu6w6GMHNBMeMp9yabCwLZ3jQIwGJDSKpu88Vbd1gRmo_9FEikQibC1v76oAtBiTGLBBHk_yA_qN9yfco7hP0GyYjU1345MVAgWZ0DjhQA90I9O2BNsNy6-hVnzztPAjWPthOl-5gjKywr7w3DMEW6NiVnPDGXYySG_7whrKrftOQMrQiS-5ySttorAKlM_1mS0IdoTrBnwEF0uw56WmRlYwtGmB0oODwE5m4RAbgI8FrPI0-XOnq_-ghRUArkQ6_jFrMosXnxV9m4mYlAM1Xj2YeAMCATY7s7AQIClwMMOlr8aHm7KBpYyZm0fAYMTIUQdQC0HsFzTk6nRN8HB1A37OpVV_GNd_g-fgYkqVCRYxpyvmgbr8XRurORmVxDlMN1qcng6RtcV5QlDINEzjgL4j-dFxrtMel4iKrd5_YdPI7gLxoNRvZIdm7xjL3XEXRHzauNsFBCAKK5ZcGn6HVZGUDAYZabQrqVonJ8K6vRzdrDV31j3oL1eaWlBae_LcJdzSRfPu2Xz7Ir1ND4JOVNsnU4O5BcpPkQiKjz38_za8ixvoF5OxkVpxIkELnC_GiQOstf9LQdnMNn9Kv3ST24HlcH8LpyeeiSF7vSizffAgwH8QvVpjOdqdKAHBnSE23L17oDa6RiDYED9alsRBdg4HPvdb2hRBsuBEMbgeFukA7dogtd68WbJfVdqa02zgbCsqTDl4KBa0YHVvNMLkiWk3NG9z-jui0ZDijtSEtAosxTvDuIYu21cScvL89CA0Pcl4bL6JOiYkG2sOKoZ0Dk-rgDLq5CH29qnQgrAoRC4AUmLoaRQFKvyjYOTsgVfcnyqEIxDeQNtJvW923KDoYqelLLT7btPM3m57pS5vcBVCn5_sFuTNfHev7aJodvG1opNTK6PnL1maZbOqxAAdgCUtbIkgHtivnPG3sl9yf-93UawKX6CE9HmmHg24z-Nlz7sZJP4DPNWm5fl_189gn9QAa3FkhAhBANhirmh-jtXKd7LrpvctA7bEEJXZGJf3h4CHYdMYm0iY30HY5Sn9axbu08uaZZQiwr8VhOthAWbaPk2OL8zbBTP6_Qjd7dXQp9aZlbeGTxI1D4XTQbjHGScxfCDJpSnahn35YoJf1c_lp3IYfMotf_TvMqLeICgsGN3qyXC8RQywTYkKLSFEfmk3sQ4f2GCeXL7CWibFv1PcRngzrl3ObX4JCYlAPCjDrz7E4048_QTd9U_4WSCeW40IXz5_zEeGx97kPi1VNuDEfIyZSGdTcUSgwO92wqveoEvmevZEPqfSoY9G4B1svUmMi6nLvojBttyeaCzizIbaQ_gTSgwNV-BrYGnsrGn7AV_MxuLKbn6vBxEjt2yZeyZTU1lWFQcVMoemMHtANuDgxRobF0gkFg5wLzV8Xw7d7ZuFoPIx9csNBhlU7D9eB_Q8m7e2d7eDCbBm7wViS5gJVaNs2_kPoP2-BdQP4iLTGgdBG0cQ0AuDy3MU2wkBvns0DDPPIMoxbEV9tdvQ2j6ZOE9PnBdwYUFA7xhX_xU7WTZVEJd4ZRvLnReJY093pDvvEM_Azy-2Z2ySHjT37ZQo4-Eb0fI2qP-FyQ3PPz2_UNihlFj0-4XOz3iN6R8_Ha1B4cXWIaFLGwrL2I1GMJoie1pcNwyki_sio46phzFO9-blh_iSdhg6YtD4fDNwgiaBkNC8bxwSxLYDrli3347_hZNLXB5rXSq4SW6s2J7S0IMRF_ZgagpRwF0Tf-zjJ0u-T9bLBax-uTQvB2qKPHo1iYmrejKYZQcOmfYmlVyU2zW6U0rtiZPSf3wPjE28TwrMFQNU-woB4.J3tSsjHygGry5xVVc9ciHQ"

    private val targetClaims = listOf("given_name", "family_name")

    @Test
    fun testSomeAvailableTrigger() {
        val key: ECPrivateKey = createECPrivateKey(decryptionKey)

        val jwtConsumer = JwtConsumerBuilder()
            .setDecryptionKey(key)
            .setDisableRequireSignature()
            .build()

        val claims = jwtConsumer.processToClaims(idToken)
        val flattenedClaims = claims.flattenClaims()

        for (targetClaim in targetClaims) {
            val foundClaim = flattenedClaims["claims.claimsMap.$targetClaim"]
            Assertions.assertNotNull(foundClaim)
        }
    }

    @Throws(NoSuchAlgorithmException::class, InvalidParameterSpecException::class, InvalidKeySpecException::class)
    private fun createECPrivateKey(rawBase64UrlEncodedKey: String): ECPrivateKey {
        val decodedKey = Base64.getUrlDecoder().decode(rawBase64UrlEncodedKey)

        val kf = KeyFactory.getInstance("EC")
        val parameters = AlgorithmParameters.getInstance("EC")
        parameters.init(ECGenParameterSpec("secp384r1"))

        val ecParameters = parameters.getParameterSpec(
            ECParameterSpec::class.java
        )
        val privateSpec = ECPrivateKeySpec(BigInteger(1, decodedKey), ecParameters)
        val key = kf.generatePrivate(privateSpec) as ECPrivateKey

        return key
    }
}
