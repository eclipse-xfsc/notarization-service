# AcaPy OpenAPI Generator config
quarkus.openapi-generator.codegen.spec.acapy_json.base-package=openapi.acapy
#openapi.acapy.api.DefaultApi.generatedDeprecated=false
# TODO: enable validation when the spec is fixed (I guess when a proper version is released)
quarkus.openapi-generator.codegen.validateSpec=false
# the Schema type confuses the generator, so correct it manually
quarkus.openapi-generator.codegen.spec.acapy_json.import-mappings.Schema=openapi.acapy.model.Schema
# change typings for credential
quarkus.openapi-generator.codegen.spec.acapy_json.type-mappings.Credential=com.fasterxml.jackson.databind.node.ObjectNode
quarkus.openapi-generator.codegen.spec.acapy_json.type-mappings.VerifiableCredential=com.fasterxml.jackson.databind.node.ObjectNode
quarkus.openapi-generator.codegen.spec.acapy_json.type-mappings.VerifiablePresentation=com.fasterxml.jackson.databind.node.ObjectNode
quarkus.openapi-generator.codegen.spec.acapy_json.type-mappings.DocumentVerificationResult=com.fasterxml.jackson.databind.node.ObjectNode

# service config
quarkus.application.name=ssi-issuance2
quarkus.http.port=8089

# OpenAPI
quarkus.smallrye-openapi.store-schema-directory = deploy/openapi
mp.openapi.extensions.smallrye.remove-unused-schemas.enable=true
mp.openapi.schema.com.fasterxml.jackson.databind.JsonNode={ "name": "AnyType", "type": "object" }
mp.openapi.scan.exclude.packages=eu.gaiax.notarization.api.profile

issuance2.service.url=${ISSUANCE2_SERVICE_URL:http://localhost:8089}

# session retention
issuance2.session.retention.period=P1D
issuance2.session.callFailOnTimeout=false

# DID resolver and registrar
gaia-x.did.useUniResolver = false
#gaia-x.did.resolver.url = https://dev.uniresolver.io/1.0
#gaia-x.did.registrar.url = https://uniregistrar.io/1.0

%test.gaia-x.did.useUniResolver = true
%test.gaia-x.did.resolver.url = https://dev.uniresolver.io/1.0
%test.gaia-x.did.registrar.url = https://uniregistrar.io/1.0

# keystore config
gaia-x.keymanager.local.alg = dir
gaia-x.keymanager.local.enc = A256GCM
%dev,test.gaia-x.keymanager.local.jwk = {"alg":"A256GCM","k":"ohqtC5643zRspDvmuHu39cXZqHvBr95QBdqfiAmMWPQ","key_ops":["encrypt","decrypt"],"kty":"oct"}

# services
quarkus.rest-client.revocation_service.url=http://localhost:8086
quarkus.rest-client.offer_api.url=http://localhost:8088
quarkus.rest-client.profile_api.url=http://localhost:8083
quarkus.rest-client.acapy_json.url=http://localhost:11000

quarkus.cache.caffeine."profile-cache".expire-after-write = 10m

# logging
quarkus.log.level=WARN
%test.quarkus.log.level=INFO
%dev.quarkus.log.category.\"eu.xfsc.not.ssi_issuance2\".level=DEBUG
%dev.quarkus.http.access-log.enabled=true
quarkus.http.access-log.exclude-pattern=\/q\/health\/(live|ready)$
%dev.quarkus.rest-client.logging.scope=request-response
%dev.quarkus.rest-client.logging.body-limit=1500
%dev.quarkus.log.category."org.jboss.resteasy.reactive.client.logging".level=DEBUG

## Database
quarkus.datasource.db-kind=postgresql

#quarkus.hibernate-orm.log.sql=true
#quarkus.hibernate-orm.database.generation=none
quarkus.flyway.migrate-at-start=false
quarkus.flyway.locations = db-flyway

%dev,test.quarkus.flyway.migrate-at-start=true
%dev,test.quarkus.flyway.clean-at-start=true

## Container
quarkus.container-image.builder=jib
quarkus.container-image.registry=node-654e3bca7fbeeed18f81d7c7.ps-xaas.io
quarkus.container-image.group=not
quarkus.container-image.tag=latest-dev
quarkus.container-image.name=${quarkus.application.name}

quarkus.jib.base-jvm-image=registry.access.redhat.com/ubi8/openjdk-21-runtime:1.18
quarkus.container-image.labels."org.opencontainers.image.base.name"=${quarkus.jib.base-jvm-image}

# Kubernetes integration configuration
quarkus.kubernetes.part-of=notarization-system
quarkus.kubernetes.name=${quarkus.application.name}

quarkus.kubernetes.readiness-probe.initial-delay=20s
quarkus.kubernetes.readiness-probe.period=45s
