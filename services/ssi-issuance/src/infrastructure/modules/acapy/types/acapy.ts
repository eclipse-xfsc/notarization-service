/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly '/action-menu/{conn_id}/close': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ActionMenuModulesResult'];
        };
      };
    };
  };
  readonly '/action-menu/{conn_id}/fetch': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ActionMenuFetchResult'];
        };
      };
    };
  };
  readonly '/action-menu/{conn_id}/perform': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['PerformRequest'];
        };
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ActionMenuModulesResult'];
        };
      };
    };
  };
  readonly '/action-menu/{conn_id}/request': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ActionMenuModulesResult'];
        };
      };
    };
  };
  readonly '/action-menu/{conn_id}/send-menu': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['SendMenu'];
        };
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ActionMenuModulesResult'];
        };
      };
    };
  };
  readonly '/connections': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Alias */
          readonly alias?: string;
          /** Connection protocol used */
          readonly connection_protocol?: 'connections/1.0' | 'didexchange/1.0';
          /** invitation key */
          readonly invitation_key?: string;
          /** My DID */
          readonly my_did?: string;
          /** Connection state */
          readonly state?:
            | 'active'
            | 'abandoned'
            | 'response'
            | 'invitation'
            | 'request'
            | 'error'
            | 'start'
            | 'init'
            | 'completed';
          /** Their DID */
          readonly their_did?: string;
          /** Their Public DID */
          readonly their_public_did?: string;
          /** Their role in the connection protocol */
          readonly their_role?:
            | 'invitee'
            | 'requester'
            | 'inviter'
            | 'responder';
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnectionList'];
        };
      };
    };
  };
  readonly '/connections/create-invitation': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['CreateInvitationRequest'];
        };
        readonly query: {
          /** Alias */
          readonly alias?: string;
          /** Auto-accept connection (defaults to configuration) */
          readonly auto_accept?: boolean;
          /** Create invitation for multiple use (default false) */
          readonly multi_use?: boolean;
          /** Create invitation from public DID (default false) */
          readonly public?: boolean;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['InvitationResult'];
        };
      };
    };
  };
  readonly '/connections/create-static': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['ConnectionStaticRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnectionStaticResult'];
        };
      };
    };
  };
  readonly '/connections/receive-invitation': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['ReceiveInvitationRequest'];
        };
        readonly query: {
          /** Alias */
          readonly alias?: string;
          /** Auto-accept connection (defaults to configuration) */
          readonly auto_accept?: boolean;
          /** Identifier for active mediation record to be used */
          readonly mediation_id?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnRecord'];
        };
      };
    };
  };
  readonly '/connections/{conn_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnRecord'];
        };
      };
    };
    readonly delete: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnectionModuleResponse'];
        };
      };
    };
  };
  readonly '/connections/{conn_id}/accept-invitation': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
        readonly query: {
          /** Identifier for active mediation record to be used */
          readonly mediation_id?: string;
          /** My URL endpoint */
          readonly my_endpoint?: Date;
          /** Label for connection */
          readonly my_label?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnRecord'];
        };
      };
    };
  };
  readonly '/connections/{conn_id}/accept-request': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
        readonly query: {
          /** My URL endpoint */
          readonly my_endpoint?: Date;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnRecord'];
        };
      };
    };
  };
  readonly '/connections/{conn_id}/endpoints': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['EndpointsResult'];
        };
      };
    };
  };
  readonly '/connections/{conn_id}/establish-inbound/{ref_id}': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
          /** Inbound connection identifier */
          readonly ref_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnectionModuleResponse'];
        };
      };
    };
  };
  readonly '/connections/{conn_id}/metadata': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
        readonly query: {
          /** Key to retrieve. */
          readonly key?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnectionMetadata'];
        };
      };
    };
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['ConnectionMetadataSetRequest'];
        };
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnectionMetadata'];
        };
      };
    };
  };
  readonly '/connections/{conn_id}/send-message': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['SendMessage'];
        };
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['BasicMessageModuleResponse'];
        };
      };
    };
  };
  readonly '/connections/{conn_id}/send-ping': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['PingRequest'];
        };
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['PingRequestResponse'];
        };
      };
    };
  };
  readonly '/connections/{conn_id}/start-introduction': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
        readonly query: {
          /** Target connection identifier */
          readonly target_connection_id: string;
          /** Message */
          readonly message?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['IntroModuleResponse'];
        };
      };
    };
  };
  readonly '/credential-definitions': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['CredentialDefinitionSendRequest'];
        };
        readonly query: {
          /** Connection identifier */
          readonly conn_id?: string;
          /** Create Transaction For Endorser's signature */
          readonly create_transaction_for_endorser?: boolean;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TxnOrCredentialDefinitionSendResult'];
        };
      };
    };
  };
  readonly '/credential-definitions/created': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Credential definition id */
          readonly cred_def_id?: string;
          /** Issuer DID */
          readonly issuer_did?: string;
          /** Schema identifier */
          readonly schema_id?: string;
          /** Schema issuer DID */
          readonly schema_issuer_did?: string;
          /** Schema name */
          readonly schema_name?: string;
          /** Schema version */
          readonly schema_version?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['CredentialDefinitionsCreatedResult'];
        };
      };
    };
  };
  readonly '/credential-definitions/{cred_def_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Credential definition identifier */
          readonly cred_def_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['CredentialDefinitionGetResult'];
        };
      };
    };
  };
  readonly '/credential-definitions/{cred_def_id}/write_record': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Credential definition identifier */
          readonly cred_def_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['CredentialDefinitionGetResult'];
        };
      };
    };
  };
  readonly '/credential/mime-types/{credential_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Credential identifier */
          readonly credential_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['AttributeMimeTypesResult'];
        };
      };
    };
  };
  readonly '/credential/revoked/{credential_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Credential identifier */
          readonly credential_id: string;
        };
        readonly query: {
          /** Earliest epoch of revocation status interval of interest */
          readonly from?: Date;
          /** Latest epoch of revocation status interval of interest */
          readonly to?: Date;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['CredRevokedResult'];
        };
      };
    };
  };
  readonly '/credential/w3c/{credential_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Credential identifier */
          readonly credential_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['VCRecord'];
        };
      };
    };
    readonly delete: {
      readonly parameters: {
        readonly path: {
          /** Credential identifier */
          readonly credential_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['HolderModuleResponse'];
        };
      };
    };
  };
  readonly '/credential/{credential_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Credential identifier */
          readonly credential_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['IndyCredInfo'];
        };
      };
    };
    readonly delete: {
      readonly parameters: {
        readonly path: {
          /** Credential identifier */
          readonly credential_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['HolderModuleResponse'];
        };
      };
    };
  };
  readonly '/credentials': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Maximum number to retrieve */
          readonly count?: Date;
          /** Start index */
          readonly start?: Date;
          /** (JSON) WQL query */
          readonly wql?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['CredInfoList'];
        };
      };
    };
  };
  readonly '/credentials/w3c': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['W3CCredentialsListRequest'];
        };
        readonly query: {
          /** Maximum number to retrieve */
          readonly count?: Date;
          /** Start index */
          readonly start?: Date;
          /** (JSON) WQL query */
          readonly wql?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['VCRecordList'];
        };
      };
    };
  };
  readonly '/didexchange/create-request': {
    readonly post: {
      readonly parameters: {
        readonly query: {
          /** Qualified public DID to which to request connection */
          readonly their_public_did: string;
          /** Alias for connection */
          readonly alias?: string;
          /** Identifier for active mediation record to be used */
          readonly mediation_id?: string;
          /** My URL endpoint */
          readonly my_endpoint?: Date;
          /** Label for connection request */
          readonly my_label?: string;
          /** Use public DID for this connection */
          readonly use_public_did?: boolean;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnRecord'];
        };
      };
    };
  };
  readonly '/didexchange/receive-request': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['DIDXRequest'];
        };
        readonly query: {
          /** Alias for connection */
          readonly alias?: string;
          /** Auto-accept connection (defaults to configuration) */
          readonly auto_accept?: boolean;
          /** Identifier for active mediation record to be used */
          readonly mediation_id?: string;
          /** My URL endpoint */
          readonly my_endpoint?: Date;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnRecord'];
        };
      };
    };
  };
  readonly '/didexchange/{conn_id}/accept-invitation': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
        readonly query: {
          /** My URL endpoint */
          readonly my_endpoint?: Date;
          /** Label for connection request */
          readonly my_label?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnRecord'];
        };
      };
    };
  };
  readonly '/didexchange/{conn_id}/accept-request': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
        readonly query: {
          /** Identifier for active mediation record to be used */
          readonly mediation_id?: string;
          /** My URL endpoint */
          readonly my_endpoint?: Date;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnRecord'];
        };
      };
    };
  };
  readonly '/discover-features-2.0/queries': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Connection identifier, if none specified, then the query will provide features for this agent. */
          readonly connection_id?: string;
          /** Goal-code feature-type query */
          readonly query_goal_code?: string;
          /** Protocol feature-type query */
          readonly query_protocol?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20DiscoveryExchangeResult'];
        };
      };
    };
  };
  readonly '/discover-features-2.0/records': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Connection identifier */
          readonly connection_id?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20DiscoveryExchangeListResult'];
        };
      };
    };
  };
  readonly '/discover-features/query': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Comment */
          readonly comment?: string;
          /** Connection identifier, if none specified, then the query will provide features for this agent. */
          readonly connection_id?: string;
          /** Protocol feature query */
          readonly query?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10DiscoveryExchangeResult'];
        };
      };
    };
  };
  readonly '/discover-features/records': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Connection identifier */
          readonly connection_id?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10DiscoveryExchangeListResult'];
        };
      };
    };
  };
  readonly '/issue-credential-2.0/create': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20IssueCredSchemaCore'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20CredExRecord'];
        };
      };
    };
  };
  readonly '/issue-credential-2.0/create-offer': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20CredOfferConnFreeRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20CredExRecord'];
        };
      };
    };
  };
  readonly '/issue-credential-2.0/records': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Connection identifier */
          readonly connection_id?: string;
          /** Role assigned in credential exchange */
          readonly role?: 'issuer' | 'holder';
          /** Credential exchange state */
          readonly state?:
            | 'proposal-sent'
            | 'proposal-received'
            | 'offer-sent'
            | 'offer-received'
            | 'request-sent'
            | 'request-received'
            | 'credential-issued'
            | 'credential-received'
            | 'done'
            | 'credential-revoked'
            | 'abandoned';
          /** Thread identifier */
          readonly thread_id?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20CredExRecordListResult'];
        };
      };
    };
  };
  readonly '/issue-credential-2.0/records/{cred_ex_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Credential exchange identifier */
          readonly cred_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20CredExRecordDetail'];
        };
      };
    };
    readonly delete: {
      readonly parameters: {
        readonly path: {
          /** Credential exchange identifier */
          readonly cred_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20IssueCredentialModuleResponse'];
        };
      };
    };
  };
  readonly '/issue-credential-2.0/records/{cred_ex_id}/issue': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20CredIssueRequest'];
        };
        readonly path: {
          /** Credential exchange identifier */
          readonly cred_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20CredExRecordDetail'];
        };
      };
    };
  };
  readonly '/issue-credential-2.0/records/{cred_ex_id}/problem-report': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20CredIssueProblemReportRequest'];
        };
        readonly path: {
          /** Credential exchange identifier */
          readonly cred_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20IssueCredentialModuleResponse'];
        };
      };
    };
  };
  readonly '/issue-credential-2.0/records/{cred_ex_id}/send-offer': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20CredBoundOfferRequest'];
        };
        readonly path: {
          /** Credential exchange identifier */
          readonly cred_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20CredExRecord'];
        };
      };
    };
  };
  readonly '/issue-credential-2.0/records/{cred_ex_id}/send-request': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20CredRequestRequest'];
        };
        readonly path: {
          /** Credential exchange identifier */
          readonly cred_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20CredExRecord'];
        };
      };
    };
  };
  readonly '/issue-credential-2.0/records/{cred_ex_id}/store': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20CredStoreRequest'];
        };
        readonly path: {
          /** Credential exchange identifier */
          readonly cred_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20CredExRecordDetail'];
        };
      };
    };
  };
  readonly '/issue-credential-2.0/send': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20CredExFree'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20CredExRecord'];
        };
      };
    };
  };
  readonly '/issue-credential-2.0/send-offer': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20CredOfferRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20CredExRecord'];
        };
      };
    };
  };
  readonly '/issue-credential-2.0/send-proposal': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20CredExFree'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20CredExRecord'];
        };
      };
    };
  };
  readonly '/issue-credential-2.0/send-request': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20CredRequestFree'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20CredExRecord'];
        };
      };
    };
  };
  readonly '/issue-credential/create': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V10CredentialCreate'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10CredentialExchange'];
        };
      };
    };
  };
  readonly '/issue-credential/create-offer': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V10CredentialConnFreeOfferRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10CredentialExchange'];
        };
      };
    };
  };
  readonly '/issue-credential/records': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Connection identifier */
          readonly connection_id?: string;
          /** Role assigned in credential exchange */
          readonly role?: 'issuer' | 'holder';
          /** Credential exchange state */
          readonly state?:
            | 'proposal_sent'
            | 'proposal_received'
            | 'offer_sent'
            | 'offer_received'
            | 'request_sent'
            | 'request_received'
            | 'credential_issued'
            | 'credential_received'
            | 'credential_acked'
            | 'credential_revoked'
            | 'abandoned';
          /** Thread identifier */
          readonly thread_id?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10CredentialExchangeListResult'];
        };
      };
    };
  };
  readonly '/issue-credential/records/{cred_ex_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Credential exchange identifier */
          readonly cred_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10CredentialExchange'];
        };
      };
    };
    readonly delete: {
      readonly parameters: {
        readonly path: {
          /** Credential exchange identifier */
          readonly cred_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['IssueCredentialModuleResponse'];
        };
      };
    };
  };
  readonly '/issue-credential/records/{cred_ex_id}/issue': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V10CredentialIssueRequest'];
        };
        readonly path: {
          /** Credential exchange identifier */
          readonly cred_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10CredentialExchange'];
        };
      };
    };
  };
  readonly '/issue-credential/records/{cred_ex_id}/problem-report': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V10CredentialProblemReportRequest'];
        };
        readonly path: {
          /** Credential exchange identifier */
          readonly cred_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['IssueCredentialModuleResponse'];
        };
      };
    };
  };
  readonly '/issue-credential/records/{cred_ex_id}/send-offer': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V10CredentialBoundOfferRequest'];
        };
        readonly path: {
          /** Credential exchange identifier */
          readonly cred_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10CredentialExchange'];
        };
      };
    };
  };
  readonly '/issue-credential/records/{cred_ex_id}/send-request': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Credential exchange identifier */
          readonly cred_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10CredentialExchange'];
        };
      };
    };
  };
  readonly '/issue-credential/records/{cred_ex_id}/store': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V10CredentialStoreRequest'];
        };
        readonly path: {
          /** Credential exchange identifier */
          readonly cred_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10CredentialExchange'];
        };
      };
    };
  };
  readonly '/issue-credential/send': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V10CredentialProposalRequestMand'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10CredentialExchange'];
        };
      };
    };
  };
  readonly '/issue-credential/send-offer': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V10CredentialFreeOfferRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10CredentialExchange'];
        };
      };
    };
  };
  readonly '/issue-credential/send-proposal': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V10CredentialProposalRequestOpt'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10CredentialExchange'];
        };
      };
    };
  };
  readonly '/jsonld/sign': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['SignRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['SignResponse'];
        };
      };
    };
  };
  readonly '/jsonld/verify': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['VerifyRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['VerifyResponse'];
        };
      };
    };
  };
  readonly '/ledger/did-endpoint': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** DID of interest */
          readonly did: string;
          /** Endpoint type of interest (default 'Endpoint') */
          readonly endpoint_type?: 'Endpoint' | 'Profile' | 'LinkedDomains';
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['GetDIDEndpointResponse'];
        };
      };
    };
  };
  readonly '/ledger/did-verkey': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** DID of interest */
          readonly did: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['GetDIDVerkeyResponse'];
        };
      };
    };
  };
  readonly '/ledger/get-nym-role': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** DID of interest */
          readonly did: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['GetNymRoleResponse'];
        };
      };
    };
  };
  readonly '/ledger/multiple/config': {
    readonly get: {
      readonly parameters: {};
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['LedgerConfigList'];
        };
      };
    };
  };
  readonly '/ledger/multiple/get-write-ledger': {
    readonly get: {
      readonly parameters: {};
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['WriteLedgerRequest'];
        };
      };
    };
  };
  readonly '/ledger/register-nym': {
    readonly post: {
      readonly parameters: {
        readonly query: {
          /** DID to register */
          readonly did: string;
          /** Verification key */
          readonly verkey: string;
          /** Alias */
          readonly alias?: string;
          /** Connection identifier */
          readonly conn_id?: string;
          /** Create Transaction For Endorser's signature */
          readonly create_transaction_for_endorser?: boolean;
          /** Role */
          readonly role?:
            | 'STEWARD'
            | 'TRUSTEE'
            | 'ENDORSER'
            | 'NETWORK_MONITOR'
            | 'reset';
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TxnOrRegisterLedgerNymResponse'];
        };
      };
    };
  };
  readonly '/ledger/rotate-public-did-keypair': {
    readonly patch: {
      readonly parameters: {};
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['LedgerModulesResult'];
        };
      };
    };
  };
  readonly '/ledger/taa': {
    readonly get: {
      readonly parameters: {};
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TAAResult'];
        };
      };
    };
  };
  readonly '/ledger/taa/accept': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['TAAAccept'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['LedgerModulesResult'];
        };
      };
    };
  };
  readonly '/mediation/default-mediator': {
    readonly get: {
      readonly parameters: {};
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['MediationRecord'];
        };
      };
    };
    readonly delete: {
      readonly parameters: {};
      readonly responses: {
        readonly 201: {
          readonly schema: definitions['MediationRecord'];
        };
      };
    };
  };
  readonly '/mediation/keylists': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Connection identifier (optional) */
          readonly conn_id?: string;
          /** Filer on role, 'client' for keys         mediated by other agents, 'server' for keys         mediated by this agent */
          readonly role?: 'client' | 'server';
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['Keylist'];
        };
      };
    };
  };
  readonly '/mediation/keylists/{mediation_id}/send-keylist-query': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['KeylistQueryFilterRequest'];
        };
        readonly path: {
          /** Mediation record identifier */
          readonly mediation_id: string;
        };
        readonly query: {
          /** limit number of results */
          readonly paginate_limit?: number;
          /** offset to use in pagination */
          readonly paginate_offset?: number;
        };
      };
      readonly responses: {
        readonly 201: {
          readonly schema: definitions['KeylistQuery'];
        };
      };
    };
  };
  readonly '/mediation/keylists/{mediation_id}/send-keylist-update': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['KeylistUpdateRequest'];
        };
        readonly path: {
          /** Mediation record identifier */
          readonly mediation_id: string;
        };
      };
      readonly responses: {
        readonly 201: {
          readonly schema: definitions['KeylistUpdate'];
        };
      };
    };
  };
  readonly '/mediation/request/{conn_id}': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['MediationCreateRequest'];
        };
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
      };
      readonly responses: {
        readonly 201: {
          readonly schema: definitions['MediationRecord'];
        };
      };
    };
  };
  readonly '/mediation/requests': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Connection identifier (optional) */
          readonly conn_id?: string;
          /** List of mediator rules for recipient */
          readonly mediator_terms?: readonly string[];
          /** List of recipient rules for mediation */
          readonly recipient_terms?: readonly string[];
          /** Mediation state (optional) */
          readonly state?: 'request' | 'granted' | 'denied';
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['MediationList'];
        };
      };
    };
  };
  readonly '/mediation/requests/{mediation_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Mediation record identifier */
          readonly mediation_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['MediationRecord'];
        };
      };
    };
    readonly delete: {
      readonly parameters: {
        readonly path: {
          /** Mediation record identifier */
          readonly mediation_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['MediationRecord'];
        };
      };
    };
  };
  readonly '/mediation/requests/{mediation_id}/deny': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['AdminMediationDeny'];
        };
        readonly path: {
          /** Mediation record identifier */
          readonly mediation_id: string;
        };
      };
      readonly responses: {
        readonly 201: {
          readonly schema: definitions['MediationDeny'];
        };
      };
    };
  };
  readonly '/mediation/requests/{mediation_id}/grant': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Mediation record identifier */
          readonly mediation_id: string;
        };
      };
      readonly responses: {
        readonly 201: {
          readonly schema: definitions['MediationGrant'];
        };
      };
    };
  };
  readonly '/mediation/{mediation_id}/default-mediator': {
    readonly put: {
      readonly parameters: {
        readonly path: {
          /** Mediation record identifier */
          readonly mediation_id: string;
        };
      };
      readonly responses: {
        readonly 201: {
          readonly schema: definitions['MediationRecord'];
        };
      };
    };
  };
  readonly '/out-of-band/create-invitation': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['InvitationCreateRequest'];
        };
        readonly query: {
          /** Auto-accept connection (defaults to configuration) */
          readonly auto_accept?: boolean;
          /** Create invitation for multiple use (default false) */
          readonly multi_use?: boolean;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['InvitationRecord'];
        };
      };
    };
  };
  readonly '/out-of-band/receive-invitation': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['InvitationMessage'];
        };
        readonly query: {
          /** Alias for connection */
          readonly alias?: string;
          /** Auto-accept connection (defaults to configuration) */
          readonly auto_accept?: boolean;
          /** Identifier for active mediation record to be used */
          readonly mediation_id?: string;
          /** Use an existing connection, if possible */
          readonly use_existing_connection?: boolean;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ConnRecord'];
        };
      };
    };
  };
  readonly '/plugins': {
    readonly get: {
      readonly parameters: {};
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['AdminModules'];
        };
      };
    };
  };
  readonly '/present-proof-2.0/create-request': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20PresCreateRequestRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20PresExRecord'];
        };
      };
    };
  };
  readonly '/present-proof-2.0/records': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Connection identifier */
          readonly connection_id?: string;
          /** Role assigned in presentation exchange */
          readonly role?: 'prover' | 'verifier';
          /** Presentation exchange state */
          readonly state?:
            | 'proposal-sent'
            | 'proposal-received'
            | 'request-sent'
            | 'request-received'
            | 'presentation-sent'
            | 'presentation-received'
            | 'done'
            | 'abandoned';
          /** Thread identifier */
          readonly thread_id?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20PresExRecordList'];
        };
      };
    };
  };
  readonly '/present-proof-2.0/records/{pres_ex_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Presentation exchange identifier */
          readonly pres_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20PresExRecord'];
        };
      };
    };
    readonly delete: {
      readonly parameters: {
        readonly path: {
          /** Presentation exchange identifier */
          readonly pres_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20PresentProofModuleResponse'];
        };
      };
    };
  };
  readonly '/present-proof-2.0/records/{pres_ex_id}/credentials': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Presentation exchange identifier */
          readonly pres_ex_id: string;
        };
        readonly query: {
          /** Maximum number to retrieve */
          readonly count?: Date;
          /** (JSON) object mapping referents to extra WQL queries */
          readonly extra_query?: string;
          /** Proof request referents of interest, comma-separated */
          readonly referent?: string;
          /** Start index */
          readonly start?: Date;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: readonly definitions['IndyCredPrecis'][];
        };
      };
    };
  };
  readonly '/present-proof-2.0/records/{pres_ex_id}/problem-report': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20PresProblemReportRequest'];
        };
        readonly path: {
          /** Presentation exchange identifier */
          readonly pres_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20PresentProofModuleResponse'];
        };
      };
    };
  };
  readonly '/present-proof-2.0/records/{pres_ex_id}/send-presentation': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20PresSpecByFormatRequest'];
        };
        readonly path: {
          /** Presentation exchange identifier */
          readonly pres_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20PresExRecord'];
        };
      };
    };
  };
  readonly '/present-proof-2.0/records/{pres_ex_id}/send-request': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20PresentationSendRequestToProposal'];
        };
        readonly path: {
          /** Presentation exchange identifier */
          readonly pres_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20PresExRecord'];
        };
      };
    };
  };
  readonly '/present-proof-2.0/records/{pres_ex_id}/verify-presentation': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Presentation exchange identifier */
          readonly pres_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20PresExRecord'];
        };
      };
    };
  };
  readonly '/present-proof-2.0/send-proposal': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20PresProposalRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20PresExRecord'];
        };
      };
    };
  };
  readonly '/present-proof-2.0/send-request': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V20PresSendRequestRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V20PresExRecord'];
        };
      };
    };
  };
  readonly '/present-proof/create-request': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V10PresentationCreateRequestRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10PresentationExchange'];
        };
      };
    };
  };
  readonly '/present-proof/records': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Connection identifier */
          readonly connection_id?: string;
          /** Role assigned in presentation exchange */
          readonly role?: 'prover' | 'verifier';
          /** Presentation exchange state */
          readonly state?:
            | 'proposal_sent'
            | 'proposal_received'
            | 'request_sent'
            | 'request_received'
            | 'presentation_sent'
            | 'presentation_received'
            | 'verified'
            | 'presentation_acked'
            | 'abandoned';
          /** Thread identifier */
          readonly thread_id?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10PresentationExchangeList'];
        };
      };
    };
  };
  readonly '/present-proof/records/{pres_ex_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Presentation exchange identifier */
          readonly pres_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10PresentationExchange'];
        };
      };
    };
    readonly delete: {
      readonly parameters: {
        readonly path: {
          /** Presentation exchange identifier */
          readonly pres_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10PresentProofModuleResponse'];
        };
      };
    };
  };
  readonly '/present-proof/records/{pres_ex_id}/credentials': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Presentation exchange identifier */
          readonly pres_ex_id: string;
        };
        readonly query: {
          /** Maximum number to retrieve */
          readonly count?: Date;
          /** (JSON) object mapping referents to extra WQL queries */
          readonly extra_query?: string;
          /** Proof request referents of interest, comma-separated */
          readonly referent?: string;
          /** Start index */
          readonly start?: Date;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: readonly definitions['IndyCredPrecis'][];
        };
      };
    };
  };
  readonly '/present-proof/records/{pres_ex_id}/problem-report': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V10PresentationProblemReportRequest'];
        };
        readonly path: {
          /** Presentation exchange identifier */
          readonly pres_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10PresentProofModuleResponse'];
        };
      };
    };
  };
  readonly '/present-proof/records/{pres_ex_id}/send-presentation': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['IndyPresSpec'];
        };
        readonly path: {
          /** Presentation exchange identifier */
          readonly pres_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10PresentationExchange'];
        };
      };
    };
  };
  readonly '/present-proof/records/{pres_ex_id}/send-request': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V10PresentationSendRequestToProposal'];
        };
        readonly path: {
          /** Presentation exchange identifier */
          readonly pres_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10PresentationExchange'];
        };
      };
    };
  };
  readonly '/present-proof/records/{pres_ex_id}/verify-presentation': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Presentation exchange identifier */
          readonly pres_ex_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10PresentationExchange'];
        };
      };
    };
  };
  readonly '/present-proof/send-proposal': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V10PresentationProposalRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10PresentationExchange'];
        };
      };
    };
  };
  readonly '/present-proof/send-request': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['V10PresentationSendRequestRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['V10PresentationExchange'];
        };
      };
    };
  };
  readonly '/resolver/resolve/{did}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** DID */
          readonly did: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['ResolutionResult'];
        };
      };
    };
  };
  readonly '/revocation/active-registry/{cred_def_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Credential definition identifier */
          readonly cred_def_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['RevRegResult'];
        };
      };
    };
  };
  readonly '/revocation/clear-pending-revocations': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['ClearPendingRevocationsRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['PublishRevocations'];
        };
      };
    };
  };
  readonly '/revocation/create-registry': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['RevRegCreateRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['RevRegResult'];
        };
      };
    };
  };
  readonly '/revocation/credential-record': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Credential exchange identifier */
          readonly cred_ex_id?: string;
          /** Credential revocation identifier */
          readonly cred_rev_id?: Date;
          /** Revocation registry identifier */
          readonly rev_reg_id?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['CredRevRecordResult'];
        };
      };
    };
  };
  readonly '/revocation/publish-revocations': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['PublishRevocations'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TxnOrPublishRevocationsResult'];
        };
      };
    };
  };
  readonly '/revocation/registries/created': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Credential definition identifier */
          readonly cred_def_id?: string;
          /** Revocation registry state */
          readonly state?: 'init' | 'generated' | 'posted' | 'active' | 'full';
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['RevRegsCreated'];
        };
      };
    };
  };
  readonly '/revocation/registry/{rev_reg_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Revocation Registry identifier */
          readonly rev_reg_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['RevRegResult'];
        };
      };
    };
    readonly patch: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['RevRegUpdateTailsFileUri'];
        };
        readonly path: {
          /** Revocation Registry identifier */
          readonly rev_reg_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['RevRegResult'];
        };
      };
    };
  };
  readonly '/revocation/registry/{rev_reg_id}/definition': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Revocation Registry identifier */
          readonly rev_reg_id: string;
        };
        readonly query: {
          /** Connection identifier */
          readonly conn_id?: string;
          /** Create Transaction For Endorser's signature */
          readonly create_transaction_for_endorser?: boolean;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TxnOrRevRegResult'];
        };
      };
    };
  };
  readonly '/revocation/registry/{rev_reg_id}/entry': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Revocation Registry identifier */
          readonly rev_reg_id: string;
        };
        readonly query: {
          /** Connection identifier */
          readonly conn_id?: string;
          /** Create Transaction For Endorser's signature */
          readonly create_transaction_for_endorser?: boolean;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['RevRegResult'];
        };
      };
    };
  };
  readonly '/revocation/registry/{rev_reg_id}/issued': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Revocation Registry identifier */
          readonly rev_reg_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['RevRegIssuedResult'];
        };
      };
    };
  };
  readonly '/revocation/registry/{rev_reg_id}/set-state': {
    readonly patch: {
      readonly parameters: {
        readonly path: {
          /** Revocation Registry identifier */
          readonly rev_reg_id: string;
        };
        readonly query: {
          /** Revocation registry state to set */
          readonly state: 'init' | 'generated' | 'posted' | 'active' | 'full';
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['RevRegResult'];
        };
      };
    };
  };
  readonly '/revocation/registry/{rev_reg_id}/tails-file': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Revocation Registry identifier */
          readonly rev_reg_id: string;
        };
      };
      readonly responses: {
        /** tails file */
        readonly 200: {
          readonly schema: string;
        };
      };
    };
    readonly put: {
      readonly parameters: {
        readonly path: {
          /** Revocation Registry identifier */
          readonly rev_reg_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['RevocationModuleResponse'];
        };
      };
    };
  };
  readonly '/revocation/revoke': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['RevokeRequest'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['RevocationModuleResponse'];
        };
      };
    };
  };
  readonly '/schemas': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['SchemaSendRequest'];
        };
        readonly query: {
          /** Connection identifier */
          readonly conn_id?: string;
          /** Create Transaction For Endorser's signature */
          readonly create_transaction_for_endorser?: boolean;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TxnOrSchemaSendResult'];
        };
      };
    };
  };
  readonly '/schemas/created': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** Schema identifier */
          readonly schema_id?: string;
          /** Schema issuer DID */
          readonly schema_issuer_did?: string;
          /** Schema name */
          readonly schema_name?: string;
          /** Schema version */
          readonly schema_version?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['SchemasCreatedResult'];
        };
      };
    };
  };
  readonly '/schemas/{schema_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Schema identifier */
          readonly schema_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['SchemaGetResult'];
        };
      };
    };
  };
  readonly '/schemas/{schema_id}/write_record': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Schema identifier */
          readonly schema_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['SchemaGetResult'];
        };
      };
    };
  };
  readonly '/shutdown': {
    readonly get: {
      readonly parameters: {};
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['AdminShutdown'];
        };
      };
    };
  };
  readonly '/status': {
    readonly get: {
      readonly parameters: {};
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['AdminStatus'];
        };
      };
    };
  };
  readonly '/status/config': {
    readonly get: {
      readonly parameters: {};
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['AdminConfig'];
        };
      };
    };
  };
  readonly '/status/live': {
    readonly get: {
      readonly parameters: {};
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['AdminStatusLiveliness'];
        };
      };
    };
  };
  readonly '/status/ready': {
    readonly get: {
      readonly parameters: {};
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['AdminStatusReadiness'];
        };
      };
    };
  };
  readonly '/status/reset': {
    readonly post: {
      readonly parameters: {};
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['AdminReset'];
        };
      };
    };
  };
  readonly '/transaction/{tran_id}/resend': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Transaction identifier */
          readonly tran_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TransactionRecord'];
        };
      };
    };
  };
  readonly '/transactions': {
    readonly get: {
      readonly parameters: {};
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TransactionList'];
        };
      };
    };
  };
  readonly '/transactions/create-request': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['Date'];
        };
        readonly query: {
          /** Transaction identifier */
          readonly tran_id: string;
          /** Endorser will write the transaction after endorsing it */
          readonly endorser_write_txn?: boolean;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TransactionRecord'];
        };
      };
    };
  };
  readonly '/transactions/{conn_id}/set-endorser-info': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
        readonly query: {
          /** Endorser DID */
          readonly endorser_did: string;
          /** Endorser Name */
          readonly endorser_name?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['EndorserInfo'];
        };
      };
    };
  };
  readonly '/transactions/{conn_id}/set-endorser-role': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Connection identifier */
          readonly conn_id: string;
        };
        readonly query: {
          /** Transaction related jobs */
          readonly transaction_my_job?:
            | 'TRANSACTION_AUTHOR'
            | 'TRANSACTION_ENDORSER'
            | 'reset';
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TransactionJobs'];
        };
      };
    };
  };
  readonly '/transactions/{tran_id}': {
    readonly get: {
      readonly parameters: {
        readonly path: {
          /** Transaction identifier */
          readonly tran_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TransactionRecord'];
        };
      };
    };
  };
  readonly '/transactions/{tran_id}/cancel': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Transaction identifier */
          readonly tran_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TransactionRecord'];
        };
      };
    };
  };
  readonly '/transactions/{tran_id}/endorse': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Transaction identifier */
          readonly tran_id: string;
        };
        readonly query: {
          /** Endorser DID */
          readonly endorser_did?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TransactionRecord'];
        };
      };
    };
  };
  readonly '/transactions/{tran_id}/refuse': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Transaction identifier */
          readonly tran_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TransactionRecord'];
        };
      };
    };
  };
  readonly '/transactions/{tran_id}/write': {
    readonly post: {
      readonly parameters: {
        readonly path: {
          /** Transaction identifier */
          readonly tran_id: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['TransactionRecord'];
        };
      };
    };
  };
  readonly '/wallet/did': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** DID of interest */
          readonly did?: string;
          /** Key type to query for. */
          readonly key_type?: 'ed25519' | 'bls12381g2';
          /** DID method to query for. e.g. sov to only fetch indy/sov DIDs */
          readonly method?: 'key' | 'sov';
          /** Whether DID is current public DID, posted to ledger but current public DID, or local to the wallet */
          readonly posture?: 'public' | 'posted' | 'wallet_only';
          /** Verification key of interest */
          readonly verkey?: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['DIDList'];
        };
      };
    };
  };
  readonly '/wallet/did/create': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['DIDCreate'];
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['DIDResult'];
        };
      };
    };
  };
  readonly '/wallet/did/local/rotate-keypair': {
    readonly patch: {
      readonly parameters: {
        readonly query: {
          /** DID of interest */
          readonly did: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['WalletModuleResponse'];
        };
      };
    };
  };
  readonly '/wallet/did/public': {
    readonly get: {
      readonly parameters: {};
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['DIDResult'];
        };
      };
    };
    readonly post: {
      readonly parameters: {
        readonly query: {
          /** DID of interest */
          readonly did: string;
          /** Connection identifier */
          readonly conn_id?: string;
          /** Create Transaction For Endorser's signature */
          readonly create_transaction_for_endorser?: boolean;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['DIDResult'];
        };
      };
    };
  };
  readonly '/wallet/get-did-endpoint': {
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** DID of interest */
          readonly did: string;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['DIDEndpoint'];
        };
      };
    };
  };
  readonly '/wallet/set-did-endpoint': {
    readonly post: {
      readonly parameters: {
        readonly body: {
          readonly body?: definitions['DIDEndpointWithType'];
        };
        readonly query: {
          /** Connection identifier */
          readonly conn_id?: string;
          /** Create Transaction For Endorser's signature */
          readonly create_transaction_for_endorser?: boolean;
        };
      };
      readonly responses: {
        readonly 200: {
          readonly schema: definitions['WalletModuleResponse'];
        };
      };
    };
  };
}

export interface definitions {
  readonly AMLRecord: {
    readonly aml?: { readonly [key: string]: string };
    readonly amlContext?: string;
    readonly version?: string;
  };
  readonly ActionMenuFetchResult: {
    /** @description Action menu */
    readonly result?: definitions['Menu'];
  };
  readonly ActionMenuModulesResult: { readonly [key: string]: unknown };
  readonly AdminConfig: {
    /** @description Configuration settings */
    readonly config?: { readonly [key: string]: unknown };
  };
  readonly AdminMediationDeny: {
    /** @description List of mediator rules for recipient */
    readonly mediator_terms?: readonly string[];
    /** @description List of recipient rules for mediation */
    readonly recipient_terms?: readonly string[];
  };
  readonly AdminModules: {
    /** @description List of admin modules */
    readonly result?: readonly string[];
  };
  readonly AdminReset: { readonly [key: string]: unknown };
  readonly AdminShutdown: { readonly [key: string]: unknown };
  readonly AdminStatus: {
    /** @description Conductor statistics */
    readonly conductor?: { readonly [key: string]: unknown };
    /** @description Default label */
    readonly label?: string;
    /** @description Timing results */
    readonly timing?: { readonly [key: string]: unknown };
    /** @description Version code */
    readonly version?: string;
  };
  readonly AdminStatusLiveliness: {
    /**
     * @description Liveliness status
     * @example true
     */
    readonly alive?: boolean;
  };
  readonly AdminStatusReadiness: {
    /**
     * @description Readiness status
     * @example true
     */
    readonly ready?: boolean;
  };
  readonly AttachDecorator: {
    /**
     * @description Attachment identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * Format: int32
     * @description Byte count of data included by reference
     * @example 1234
     */
    readonly byte_count?: number;
    readonly data: definitions['AttachDecoratorData'];
    /**
     * @description Human-readable description of content
     * @example view from doorway, facing east, with lights off
     */
    readonly description?: string;
    /**
     * @description File name
     * @example IMG1092348.png
     */
    readonly filename?: string;
    /**
     * @description Hint regarding last modification datetime, in ISO-8601 format
     * @example 2021-12-31T23:59:59Z
     */
    readonly lastmod_time?: Date;
    /**
     * @description MIME type
     * @example image/png
     */
    readonly 'mime-type'?: string;
  };
  readonly AttachDecoratorData: {
    /**
     * @description Base64-encoded data
     * @example ey4uLn0=
     */
    readonly base64?: string;
    /**
     * @description JSON-serialized data
     * @example {"sample": "content"}
     */
    readonly json?: { readonly [key: string]: unknown };
    /** @description Detached Java Web Signature */
    readonly jws?: definitions['AttachDecoratorDataJWS'];
    /** @description List of hypertext links to data */
    readonly links?: readonly string[];
    /**
     * @description SHA256 hash (binhex encoded) of content
     * @example 617a48c7c8afe0521efdc03e5bb0ad9e655893e6b4b51f0e794d70fba132aacb
     */
    readonly sha256?: string;
  };
  readonly AttachDecoratorData1JWS: {
    readonly header: definitions['AttachDecoratorDataJWSHeader'];
    /**
     * @description protected JWS header
     * @example ey4uLn0
     */
    readonly protected?: string;
    /**
     * @description signature
     * @example ey4uLn0
     */
    readonly signature: string;
  };
  readonly AttachDecoratorDataJWS: {
    readonly header?: definitions['AttachDecoratorDataJWSHeader'];
    /**
     * @description protected JWS header
     * @example ey4uLn0
     */
    readonly protected?: string;
    /**
     * @description signature
     * @example ey4uLn0
     */
    readonly signature?: string;
    /** @description List of signatures */
    readonly signatures?: readonly definitions['AttachDecoratorData1JWS'][];
  };
  readonly AttachDecoratorDataJWSHeader: {
    /**
     * @description Key identifier, in W3C did:key or DID URL format
     * @example did:sov:LjgpST2rjsoxYegQDRm7EL#keys-4
     */
    readonly kid: string;
  };
  readonly AttachmentDef: {
    /**
     * @description Attachment identifier
     * @example attachment-0
     */
    readonly id?: Date;
    /**
     * @description Attachment type
     * @example present-proof
     * @enum {string}
     */
    readonly type?: 'credential-offer' | 'present-proof';
  };
  readonly AttributeMimeTypesResult: {
    readonly results?: { readonly [key: string]: string };
  };
  readonly BasicMessageModuleResponse: { readonly [key: string]: unknown };
  readonly ClaimFormat: {
    readonly jwt?: { readonly [key: string]: unknown };
    readonly jwt_vc?: { readonly [key: string]: unknown };
    readonly jwt_vp?: { readonly [key: string]: unknown };
    readonly ldp?: { readonly [key: string]: unknown };
    readonly ldp_vc?: { readonly [key: string]: unknown };
    readonly ldp_vp?: { readonly [key: string]: unknown };
  };
  readonly ClearPendingRevocationsRequest: {
    /** @description Credential revocation ids by revocation registry id: omit for all, specify null or empty list for all pending per revocation registry */
    readonly purge?: { readonly [key: string]: readonly Date[] };
  };
  readonly ConnRecord: {
    /**
     * @description Connection acceptance: manual or auto
     * @example auto
     * @enum {string}
     */
    readonly accept?: 'manual' | 'auto';
    /**
     * @description Optional alias to apply to connection for later use
     * @example Bob, providing quotes
     */
    readonly alias?: string;
    /**
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id?: string;
    /**
     * @description Connection protocol used
     * @example connections/1.0
     * @enum {string}
     */
    readonly connection_protocol?: 'connections/1.0' | 'didexchange/1.0';
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    /**
     * @description Error message
     * @example No DIDDoc provided; cannot connect to public DID
     */
    readonly error_msg?: string;
    /**
     * @description Inbound routing connection id to use
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly inbound_connection_id?: string;
    /**
     * @description Public key for connection
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    readonly invitation_key?: string;
    /**
     * @description Invitation mode
     * @example once
     * @enum {string}
     */
    readonly invitation_mode?: 'once' | 'multi' | 'static';
    /**
     * @description ID of out-of-band invitation message
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly invitation_msg_id?: string;
    /**
     * @description Our DID for connection
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly my_did?: string;
    /**
     * @description Connection request identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly request_id?: string;
    /**
     * @description State per RFC 23
     * @example invitation-sent
     */
    readonly rfc23_state?: string;
    /**
     * @description Routing state of connection
     * @example active
     * @enum {string}
     */
    readonly routing_state?: 'none' | 'request' | 'active' | 'error';
    /**
     * @description Current record state
     * @example active
     */
    readonly state?: string;
    /**
     * @description Their DID for connection
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly their_did?: string;
    /**
     * @description Their label for connection
     * @example Bob
     */
    readonly their_label?: string;
    /**
     * @description Other agent's public DID for connection
     * @example 2cpBmR3FqGKWi5EyUbpRY8
     */
    readonly their_public_did?: string;
    /**
     * @description Their role in the connection protocol
     * @example requester
     * @enum {string}
     */
    readonly their_role?: 'invitee' | 'requester' | 'inviter' | 'responder';
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
  };
  readonly ConnectionInvitation: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /**
     * @description DID for connection invitation
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly did?: string;
    /**
     * Format: url
     * @description Optional image URL for connection invitation
     * @example http://192.168.56.101/img/logo.jpg
     */
    readonly imageUrl?: string;
    /**
     * @description Optional label for connection invitation
     * @example Bob
     */
    readonly label?: string;
    /** @description List of recipient keys */
    readonly recipientKeys?: readonly string[];
    /** @description List of routing keys */
    readonly routingKeys?: readonly string[];
    /**
     * @description Service endpoint at which to reach this agent
     * @example http://192.168.56.101:8020
     */
    readonly serviceEndpoint?: string;
  };
  readonly ConnectionList: {
    /** @description List of connection records */
    readonly results?: readonly definitions['ConnRecord'][];
  };
  readonly ConnectionMetadata: {
    /** @description Dictionary of metadata associated with connection. */
    readonly results?: { readonly [key: string]: unknown };
  };
  readonly ConnectionMetadataSetRequest: {
    /** @description Dictionary of metadata to set for connection. */
    readonly metadata: { readonly [key: string]: unknown };
  };
  readonly ConnectionModuleResponse: { readonly [key: string]: unknown };
  readonly ConnectionStaticRequest: {
    /** @description Alias to assign to this connection */
    readonly alias?: string;
    /**
     * @description Local DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly my_did?: string;
    /** @description Seed to use for the local DID */
    readonly my_seed?: string;
    /**
     * @description Remote DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly their_did?: string;
    /**
     * @description URL endpoint for other party
     * @example https://myhost:8021
     */
    readonly their_endpoint?: Date;
    /** @description Other party's label for this connection */
    readonly their_label?: string;
    /** @description Seed to use for the remote DID */
    readonly their_seed?: string;
    /** @description Remote verification key */
    readonly their_verkey?: string;
  };
  readonly ConnectionStaticResult: {
    /**
     * @description Local DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly my_did: string;
    /**
     * @description My URL endpoint
     * @example https://myhost:8021
     */
    readonly my_endpoint: Date;
    /**
     * @description My verification key
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    readonly my_verkey: string;
    readonly record: definitions['ConnRecord'];
    /**
     * @description Remote DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly their_did: string;
    /**
     * @description Remote verification key
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    readonly their_verkey: string;
  };
  readonly Constraints: {
    readonly fields?: readonly definitions['DIFField'][];
    readonly is_holder?: readonly definitions['DIFHolder'][];
    /** @description LimitDisclosure */
    readonly limit_disclosure?: string;
    /** @enum {string} */
    readonly status_active?: 'required' | 'allowed' | 'disallowed';
    /** @enum {string} */
    readonly status_revoked?: 'required' | 'allowed' | 'disallowed';
    /** @enum {string} */
    readonly status_suspended?: 'required' | 'allowed' | 'disallowed';
    /**
     * @description SubjectIsIssuer
     * @enum {string}
     */
    readonly subject_is_issuer?: 'required' | 'preferred';
  };
  readonly CreateInvitationRequest: {
    /**
     * @description Identifier for active mediation record to be used
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly mediation_id?: string;
    /** @description Optional metadata to attach to the connection created with the invitation */
    readonly metadata?: { readonly [key: string]: unknown };
    /**
     * @description Optional label for connection invitation
     * @example Bob
     */
    readonly my_label?: string;
    /** @description List of recipient keys */
    readonly recipient_keys?: readonly string[];
    /** @description List of routing keys */
    readonly routing_keys?: readonly string[];
    /**
     * @description Connection endpoint
     * @example http://192.168.56.102:8020
     */
    readonly service_endpoint?: string;
  };
  readonly CredAttrSpec: {
    /**
     * @description MIME type: omit for (null) default
     * @example image/jpeg
     */
    readonly 'mime-type'?: string;
    /**
     * @description Attribute name
     * @example favourite_drink
     */
    readonly name: string;
    /**
     * @description Attribute value: base64-encode if MIME type is present
     * @example martini
     */
    readonly value: string;
  };
  readonly CredDefValue: {
    /** @description Primary value for credential definition */
    readonly primary?: definitions['CredDefValuePrimary'];
    /** @description Revocation value for credential definition */
    readonly revocation?: definitions['CredDefValueRevocation'];
  };
  readonly CredDefValuePrimary: {
    /** @example 0 */
    readonly n?: Date;
    readonly r?: definitions['Generated'];
    /** @example 0 */
    readonly rctxt?: Date;
    /** @example 0 */
    readonly s?: Date;
    /** @example 0 */
    readonly z?: Date;
  };
  readonly CredDefValueRevocation: {
    /** @example 1 1F14F&ECB578F 2 095E45DDF417D */
    readonly g?: string;
    /** @example 1 1D64716fCDC00C 1 0C781960FA66E3D3 2 095E45DDF417D */
    readonly g_dash?: string;
    /** @example 1 16675DAE54BFAE8 2 095E45DD417D */
    readonly h?: string;
    /** @example 1 21E5EF9476EAF18 2 095E45DDF417D */
    readonly h0?: string;
    /** @example 1 236D1D99236090 2 095E45DDF417D */
    readonly h1?: string;
    /** @example 1 1C3AE8D1F1E277 2 095E45DDF417D */
    readonly h2?: string;
    /** @example 1 1B2A32CF3167 1 2490FEBF6EE55 1 0000000000000000 */
    readonly h_cap?: string;
    /** @example 1 1D8549E8C0F8 2 095E45DDF417D */
    readonly htilde?: string;
    /** @example 1 142CD5E5A7DC 1 153885BD903312 2 095E45DDF417D */
    readonly pk?: string;
    /** @example 1 0C430AAB2B4710 1 1CB3A0932EE7E 1 0000000000000000 */
    readonly u?: string;
    /** @example 1 153558BD903312 2 095E45DDF417D 1 0000000000000000 */
    readonly y?: string;
  };
  readonly CredInfoList: {
    readonly results?: readonly definitions['IndyCredInfo'][];
  };
  readonly CredRevRecordResult: {
    readonly result?: definitions['IssuerCredRevRecord'];
  };
  readonly CredRevokedResult: {
    /** @description Whether credential is revoked on the ledger */
    readonly revoked?: boolean;
  };
  readonly Credential: {
    /**
     * @description The JSON-LD context of the credential
     * @example https://www.w3.org/2018/credentials/v1,https://www.w3.org/2018/credentials/examples/v1
     */
    readonly '@context': readonly unknown[];
    /** @example [object Object] */
    readonly credentialSubject: unknown;
    /**
     * @description The expiration date
     * @example 2010-01-01T19:23:24Z
     */
    readonly expirationDate?: Date;
    /** @example http://example.edu/credentials/1872 */
    readonly id?: Date;
    /**
     * @description The issuance date
     * @example 2010-01-01T19:23:24Z
     */
    readonly issuanceDate: Date;
    /**
     * @description The JSON-LD Verifiable Credential Issuer. Either string of object with id field.
     * @example did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH
     */
    readonly issuer: unknown;
    /**
     * @description The proof of the credential
     * @example [object Object]
     */
    readonly proof?: definitions['LinkedDataProof'];
    /**
     * @description The JSON-LD type of the credential
     * @example VerifiableCredential,AlumniCredential
     */
    readonly type: readonly string[];
  };
  readonly CredentialDefinition: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly id?: string;
    /**
     * @description Schema identifier within credential definition identifier
     * @example 20
     */
    readonly schemaId?: string;
    /**
     * @description Tag within credential definition identifier
     * @example tag
     */
    readonly tag?: string;
    /**
     * @description Signature type: CL for Camenisch-Lysyanskaya
     * @default CL
     * @example CL
     */
    readonly type?: unknown;
    /** @description Credential definition primary and revocation values */
    readonly value?: definitions['CredDefValue'];
    /**
     * @description Node protocol version
     * @example 1.0
     */
    readonly ver?: string;
  };
  readonly CredentialDefinitionGetResult: {
    readonly credential_definition?: definitions['CredentialDefinition'];
  };
  readonly CredentialDefinitionSendRequest: {
    /**
     * Format: int32
     * @description Revocation registry size
     * @example 1000
     */
    readonly revocation_registry_size?: number;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    readonly schema_id?: string;
    /** @description Revocation supported flag */
    readonly support_revocation?: boolean;
    /**
     * @description Credential definition identifier tag
     * @example default
     */
    readonly tag?: string;
  };
  readonly CredentialDefinitionSendResult: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly credential_definition_id?: string;
  };
  readonly CredentialDefinitionsCreatedResult: {
    readonly credential_definition_ids?: readonly string[];
  };
  readonly CredentialOffer: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /** @description Human-readable comment */
    readonly comment?: string;
    readonly credential_preview?: definitions['CredentialPreview'];
    readonly 'offers~attach': readonly definitions['AttachDecorator'][];
  };
  readonly CredentialPreview: {
    /**
     * @description Message type identifier
     * @example issue-credential/1.0/credential-preview
     */
    readonly '@type'?: string;
    readonly attributes: readonly definitions['CredAttrSpec'][];
  };
  readonly CredentialProposal: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /** @description Human-readable comment */
    readonly comment?: string;
    /** @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag */
    readonly cred_def_id?: string;
    readonly credential_proposal?: definitions['CredentialPreview'];
    /** @example WgWxqztrNooG92RXvxSTWv */
    readonly issuer_did?: string;
    /** @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0 */
    readonly schema_id?: string;
    /** @example WgWxqztrNooG92RXvxSTWv */
    readonly schema_issuer_did?: string;
    readonly schema_name?: string;
    /** @example 1.0 */
    readonly schema_version?: string;
  };
  readonly CredentialStatusOptions: {
    /**
     * @description Credential status method type to use for the credential. Should match status method registered in the Verifiable Credential Extension Registry
     * @example CredentialStatusList2017
     */
    readonly type: string;
  };
  readonly DID: {
    /**
     * @description DID of interest
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly did?: string;
    /**
     * @description Key type associated with the DID
     * @example ed25519
     * @enum {string}
     */
    readonly key_type?: 'ed25519' | 'bls12381g2';
    /**
     * @description Did method associated with the DID
     * @example sov
     * @enum {string}
     */
    readonly method?: 'sov' | 'key';
    /**
     * @description Whether DID is current public DID, posted to ledger but not current public DID, or local to the wallet
     * @example wallet_only
     * @enum {string}
     */
    readonly posture?: 'public' | 'posted' | 'wallet_only';
    /**
     * @description Public verification key
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    readonly verkey?: string;
  };
  readonly DIDCreate: {
    /**
     * @example sov
     * @enum {string}
     */
    readonly method?: 'key' | 'sov';
    /** @description To define a key type for a did:key */
    readonly options?: definitions['DIDCreateOptions'];
  };
  readonly DIDCreateOptions: {
    /**
     * @example ed25519
     * @enum {string}
     */
    readonly key_type: 'ed25519' | 'bls12381g2';
  };
  readonly DIDEndpoint: {
    /**
     * @description DID of interest
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly did: string;
    /**
     * @description Endpoint to set (omit to delete)
     * @example https://myhost:8021
     */
    readonly endpoint?: Date;
  };
  readonly DIDEndpointWithType: {
    /**
     * @description DID of interest
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly did: string;
    /**
     * @description Endpoint to set (omit to delete)
     * @example https://myhost:8021
     */
    readonly endpoint?: Date;
    /**
     * @description Endpoint type to set (default 'Endpoint'); affects only public or posted DIDs
     * @example Endpoint
     * @enum {string}
     */
    readonly endpoint_type?: 'Endpoint' | 'Profile' | 'LinkedDomains';
  };
  readonly DIDList: {
    /** @description DID list */
    readonly results?: readonly definitions['DID'][];
  };
  readonly DIDResult: {
    readonly result?: definitions['DID'];
  };
  readonly DIDXRequest: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /**
     * @description DID of exchange
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly did?: string;
    /** @description As signed attachment, DID Doc associated with DID */
    readonly 'did_doc~attach'?: definitions['AttachDecorator'];
    /**
     * @description Label for DID exchange request
     * @example Request to connect with Bob
     */
    readonly label: string;
  };
  readonly DIFField: {
    readonly filter?: definitions['Filter'];
    /** @description ID */
    readonly id?: string;
    readonly path?: readonly string[];
    /**
     * @description Preference
     * @enum {string}
     */
    readonly predicate?: 'required' | 'preferred';
    /** @description Purpose */
    readonly purpose?: string;
  };
  readonly DIFHolder: {
    /**
     * @description Preference
     * @enum {string}
     */
    readonly directive?: 'required' | 'preferred';
    readonly field_id?: readonly string[];
  };
  readonly DIFOptions: {
    /**
     * @description Challenge protect against replay attack
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly challenge?: string;
    /**
     * @description Domain protect against replay attack
     * @example 4jt78h47fh47
     */
    readonly domain?: string;
  };
  readonly DIFPresSpec: {
    /** @description Issuer identifier to sign the presentation, if different from current public DID */
    readonly issuer_id?: string;
    readonly presentation_definition?: definitions['PresentationDefinition'];
    /**
     * @description Mapping of input_descriptor id to list of stored W3C credential record_id
     * @example [object Object]
     */
    readonly record_ids?: { readonly [key: string]: unknown };
    /**
     * @description reveal doc [JSON-LD frame] dict used to derive the credential when selective disclosure is required
     * @example [object Object]
     */
    readonly reveal_doc?: { readonly [key: string]: unknown };
  };
  readonly DIFProofProposal: {
    readonly input_descriptors?: readonly definitions['InputDescriptors'][];
    readonly options?: definitions['DIFOptions'];
  };
  readonly DIFProofRequest: {
    readonly options?: definitions['DIFOptions'];
    readonly presentation_definition: definitions['PresentationDefinition'];
  };
  readonly Date: {
    /**
     * Format: date-time
     * @description Expiry Date
     * @example 2021-03-29T05:22:19Z
     */
    readonly expires_time: Date;
  };
  readonly Disclose: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /** @description List of protocol descriptors */
    readonly protocols: readonly definitions['ProtocolDescriptor'][];
  };
  readonly Disclosures: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /** @description List of protocol or goal_code descriptors */
    readonly disclosures: readonly unknown[];
  };
  readonly Doc: {
    /** @description Credential to sign */
    readonly credential: { readonly [key: string]: unknown };
    /** @description Signature options */
    readonly options: definitions['SignatureOptions'];
  };
  readonly EndorserInfo: {
    /** @description Endorser DID */
    readonly endorser_did: string;
    /** @description Endorser Name */
    readonly endorser_name?: string;
  };
  readonly EndpointsResult: {
    /**
     * @description My endpoint
     * @example https://myhost:8021
     */
    readonly my_endpoint?: Date;
    /**
     * @description Their endpoint
     * @example https://myhost:8021
     */
    readonly their_endpoint?: Date;
  };
  readonly Filter: {
    /** @description Const */
    readonly const?: unknown;
    readonly enum?: readonly unknown[];
    /** @description ExclusiveMaximum */
    readonly exclusiveMaximum?: unknown;
    /** @description ExclusiveMinimum */
    readonly exclusiveMinimum?: unknown;
    /** @description Format */
    readonly format?: string;
    /**
     * Format: int32
     * @description Max Length
     * @example 1234
     */
    readonly maxLength?: number;
    /** @description Maximum */
    readonly maximum?: unknown;
    /**
     * Format: int32
     * @description Min Length
     * @example 1234
     */
    readonly minLength?: number;
    /** @description Minimum */
    readonly minimum?: unknown;
    /** @description Not */
    readonly not?: boolean;
    /** @description Pattern */
    readonly pattern?: string;
    /** @description Type */
    readonly type?: string;
  };
  readonly Generated: {
    /** @example 0 */
    readonly master_secret?: Date;
    /** @example 0 */
    readonly number?: Date;
    /** @example 0 */
    readonly remainder?: Date;
  };
  readonly GetDIDEndpointResponse: {
    /**
     * @description Full verification key
     * @example https://myhost:8021
     */
    readonly endpoint?: Date;
  };
  readonly GetDIDVerkeyResponse: {
    /**
     * @description Full verification key
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    readonly verkey?: string;
  };
  readonly GetNymRoleResponse: {
    /**
     * @description Ledger role
     * @example ENDORSER
     * @enum {string}
     */
    readonly role?:
      | 'STEWARD'
      | 'TRUSTEE'
      | 'ENDORSER'
      | 'NETWORK_MONITOR'
      | 'USER'
      | 'ROLE_REMOVE';
  };
  readonly HolderModuleResponse: { readonly [key: string]: unknown };
  readonly IndyAttrValue: {
    /**
     * @description Attribute encoded value
     * @example -1
     */
    readonly encoded: Date;
    /** @description Attribute raw value */
    readonly raw: string;
  };
  readonly IndyCredAbstract: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly cred_def_id: string;
    /** @description Key correctness proof */
    readonly key_correctness_proof: definitions['IndyKeyCorrectnessProof'];
    /**
     * @description Nonce in credential abstract
     * @example 0
     */
    readonly nonce: Date;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    readonly schema_id: string;
  };
  readonly IndyCredInfo: {
    /** @description Attribute names and value */
    readonly attrs?: { readonly [key: string]: string };
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly cred_def_id?: string;
    /**
     * @description Credential revocation identifier
     * @example 12345
     */
    readonly cred_rev_id?: Date;
    /**
     * @description Wallet referent
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly referent?: string;
    /**
     * @description Revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    readonly rev_reg_id?: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    readonly schema_id?: string;
  };
  readonly IndyCredPrecis: {
    /** @description Credential info */
    readonly cred_info?: definitions['IndyCredInfo'];
    /** @description Non-revocation interval from presentation request */
    readonly interval?: definitions['IndyNonRevocationInterval'];
    readonly presentation_referents?: readonly string[];
  };
  readonly IndyCredRequest: {
    /** @description Blinded master secret */
    readonly blinded_ms: { readonly [key: string]: unknown };
    /** @description Blinded master secret correctness proof */
    readonly blinded_ms_correctness_proof: { readonly [key: string]: unknown };
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly cred_def_id: string;
    /**
     * @description Nonce in credential request
     * @example 0
     */
    readonly nonce: Date;
    /**
     * @description Prover DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly prover_did?: string;
  };
  readonly IndyCredential: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly cred_def_id: string;
    /** @description Revocation registry state */
    readonly rev_reg?: { readonly [key: string]: unknown };
    /**
     * @description Revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    readonly rev_reg_id?: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    readonly schema_id: string;
    /** @description Credential signature */
    readonly signature: { readonly [key: string]: unknown };
    /** @description Credential signature correctness proof */
    readonly signature_correctness_proof: { readonly [key: string]: unknown };
    /** @description Credential attributes */
    readonly values: { readonly [key: string]: definitions['IndyAttrValue'] };
    /** @description Witness for revocation proof */
    readonly witness?: { readonly [key: string]: unknown };
  };
  readonly IndyEQProof: {
    /** @example 0 */
    readonly a_prime?: Date;
    /** @example 0 */
    readonly e?: Date;
    readonly m?: { readonly [key: string]: Date };
    /** @example 0 */
    readonly m2?: Date;
    readonly revealed_attrs?: { readonly [key: string]: Date };
    /** @example 0 */
    readonly v?: Date;
  };
  readonly IndyGEProof: {
    /** @example 0 */
    readonly alpha?: Date;
    /** @example 0 */
    readonly mj?: Date;
    readonly predicate?: definitions['IndyGEProofPred'];
    readonly r?: { readonly [key: string]: Date };
    readonly t?: { readonly [key: string]: Date };
    readonly u?: { readonly [key: string]: Date };
  };
  readonly IndyGEProofPred: {
    /** @description Attribute name, indy-canonicalized */
    readonly attr_name?: string;
    /**
     * @description Predicate type
     * @enum {string}
     */
    readonly p_type?: 'LT' | 'LE' | 'GE' | 'GT';
    /**
     * Format: int32
     * @description Predicate threshold value
     */
    readonly value?: number;
  };
  readonly IndyKeyCorrectnessProof: {
    /**
     * @description c in key correctness proof
     * @example 0
     */
    readonly c: Date;
    /** @description xr_cap in key correctness proof */
    readonly xr_cap: readonly (readonly string[])[];
    /**
     * @description xz_cap in key correctness proof
     * @example 0
     */
    readonly xz_cap: Date;
  };
  readonly IndyNonRevocProof: {
    readonly c_list?: { readonly [key: string]: string };
    readonly x_list?: { readonly [key: string]: string };
  };
  readonly IndyNonRevocationInterval: {
    /**
     * Format: int32
     * @description Earliest time of interest in non-revocation interval
     * @example 1640995199
     */
    readonly from?: number;
    /**
     * Format: int32
     * @description Latest time of interest in non-revocation interval
     * @example 1640995199
     */
    readonly to?: number;
  };
  readonly IndyPresAttrSpec: {
    /** @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag */
    readonly cred_def_id?: string;
    /**
     * @description MIME type (default null)
     * @example image/jpeg
     */
    readonly 'mime-type'?: string;
    /**
     * @description Attribute name
     * @example favourite_drink
     */
    readonly name: string;
    /**
     * @description Credential referent
     * @example 0
     */
    readonly referent?: Date;
    /**
     * @description Attribute value
     * @example martini
     */
    readonly value?: string;
  };
  readonly IndyPresPredSpec: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly cred_def_id?: string;
    /**
     * @description Attribute name
     * @example high_score
     */
    readonly name: string;
    /**
     * @description Predicate type ('<', '<=', '>=', or '>')
     * @example >=
     * @enum {string}
     */
    readonly predicate: '<' | '<=' | '>=' | '>';
    /**
     * Format: int32
     * @description Threshold value
     */
    readonly threshold: number;
  };
  readonly IndyPresPreview: {
    /**
     * @description Message type identifier
     * @example did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/present-proof/1.0/presentation-preview
     */
    readonly '@type'?: string;
    readonly attributes: readonly definitions['IndyPresAttrSpec'][];
    readonly predicates: readonly definitions['IndyPresPredSpec'][];
  };
  readonly IndyPresSpec: {
    /** @description Nested object mapping proof request attribute referents to requested-attribute specifiers */
    readonly requested_attributes: {
      readonly [key: string]: definitions['IndyRequestedCredsRequestedAttr'];
    };
    /** @description Nested object mapping proof request predicate referents to requested-predicate specifiers */
    readonly requested_predicates: {
      readonly [key: string]: definitions['IndyRequestedCredsRequestedPred'];
    };
    /** @description Self-attested attributes to build into proof */
    readonly self_attested_attributes: { readonly [key: string]: string };
    /** @description Whether to trace event (default false) */
    readonly trace?: boolean;
  };
  readonly IndyPrimaryProof: {
    /** @description Indy equality proof */
    readonly eq_proof?: definitions['IndyEQProof'];
    /** @description Indy GE proofs */
    readonly ge_proofs?: readonly definitions['IndyGEProof'][];
  };
  readonly IndyProof: {
    /** @description Indy proof.identifiers content */
    readonly identifiers?: readonly definitions['IndyProofIdentifier'][];
    /** @description Indy proof.proof content */
    readonly proof?: definitions['IndyProofProof'];
    /** @description Indy proof.requested_proof content */
    readonly requested_proof?: definitions['IndyProofRequestedProof'];
  };
  readonly IndyProofIdentifier: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly cred_def_id?: string;
    /**
     * @description Revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    readonly rev_reg_id?: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    readonly schema_id?: string;
    /**
     * Format: int32
     * @description Timestamp epoch
     * @example 1640995199
     */
    readonly timestamp?: number;
  };
  readonly IndyProofProof: {
    /** @description Indy proof aggregated proof */
    readonly aggregated_proof?: definitions['IndyProofProofAggregatedProof'];
    /** @description Indy proof proofs */
    readonly proofs?: readonly definitions['IndyProofProofProofsProof'][];
  };
  readonly IndyProofProofAggregatedProof: {
    /** @description c_hash value */
    readonly c_hash?: string;
    /** @description c_list value */
    readonly c_list?: readonly (readonly number[])[];
  };
  readonly IndyProofProofProofsProof: {
    /** @description Indy non-revocation proof */
    readonly non_revoc_proof?: definitions['IndyNonRevocProof'];
    /** @description Indy primary proof */
    readonly primary_proof?: definitions['IndyPrimaryProof'];
  };
  readonly IndyProofReqAttrSpec: {
    /**
     * @description Attribute name
     * @example favouriteDrink
     */
    readonly name?: string;
    /** @description Attribute name group */
    readonly names?: readonly string[];
    readonly non_revoked?: definitions['IndyProofReqAttrSpecNonRevoked'];
    /** @description If present, credential must satisfy one of given restrictions: specify schema_id, schema_issuer_did, schema_name, schema_version, issuer_did, cred_def_id, and/or attr::<attribute-name>::value where <attribute-name> represents a credential attribute name */
    readonly restrictions?: readonly { readonly [key: string]: string }[];
  };
  readonly IndyProofReqAttrSpecNonRevoked: {
    /**
     * Format: int32
     * @description Earliest time of interest in non-revocation interval
     * @example 1640995199
     */
    readonly from?: number;
    /**
     * Format: int32
     * @description Latest time of interest in non-revocation interval
     * @example 1640995199
     */
    readonly to?: number;
  };
  readonly IndyProofReqPredSpec: {
    /**
     * @description Attribute name
     * @example index
     */
    readonly name: string;
    readonly non_revoked?: definitions['IndyProofReqPredSpecNonRevoked'];
    /**
     * @description Predicate type ('<', '<=', '>=', or '>')
     * @example >=
     * @enum {string}
     */
    readonly p_type: '<' | '<=' | '>=' | '>';
    /**
     * Format: int32
     * @description Threshold value
     */
    readonly p_value: number;
    /** @description If present, credential must satisfy one of given restrictions: specify schema_id, schema_issuer_did, schema_name, schema_version, issuer_did, cred_def_id, and/or attr::<attribute-name>::value where <attribute-name> represents a credential attribute name */
    readonly restrictions?: readonly { readonly [key: string]: string }[];
  };
  readonly IndyProofReqPredSpecNonRevoked: {
    /**
     * Format: int32
     * @description Earliest time of interest in non-revocation interval
     * @example 1640995199
     */
    readonly from?: number;
    /**
     * Format: int32
     * @description Latest time of interest in non-revocation interval
     * @example 1640995199
     */
    readonly to?: number;
  };
  readonly IndyProofRequest: {
    /**
     * @description Proof request name
     * @example Proof request
     */
    readonly name?: string;
    readonly non_revoked?: definitions['IndyProofRequestNonRevoked'];
    /**
     * @description Nonce
     * @example 1
     */
    readonly nonce?: Date;
    /** @description Requested attribute specifications of proof request */
    readonly requested_attributes: {
      readonly [key: string]: definitions['IndyProofReqAttrSpec'];
    };
    /** @description Requested predicate specifications of proof request */
    readonly requested_predicates: {
      readonly [key: string]: definitions['IndyProofReqPredSpec'];
    };
    /**
     * @description Proof request version
     * @example 1.0
     */
    readonly version?: string;
  };
  readonly IndyProofRequestNonRevoked: {
    /**
     * Format: int32
     * @description Earliest time of interest in non-revocation interval
     * @example 1640995199
     */
    readonly from?: number;
    /**
     * Format: int32
     * @description Latest time of interest in non-revocation interval
     * @example 1640995199
     */
    readonly to?: number;
  };
  readonly IndyProofRequestedProof: {
    /** @description Proof requested proof predicates. */
    readonly predicates?: {
      readonly [key: string]: definitions['IndyProofRequestedProofPredicate'];
    };
    /** @description Proof requested proof revealed attribute groups */
    readonly revealed_attr_groups?: {
      readonly [
        key: string
      ]: definitions['IndyProofRequestedProofRevealedAttrGroup'];
    };
    /** @description Proof requested proof revealed attributes */
    readonly revealed_attrs?: {
      readonly [
        key: string
      ]: definitions['IndyProofRequestedProofRevealedAttr'];
    };
    /** @description Proof requested proof self-attested attributes */
    readonly self_attested_attrs?: { readonly [key: string]: unknown };
    /** @description Unrevealed attributes */
    readonly unrevealed_attrs?: { readonly [key: string]: unknown };
  };
  readonly IndyProofRequestedProofPredicate: {
    /**
     * Format: int32
     * @description Sub-proof index
     */
    readonly sub_proof_index?: number;
  };
  readonly IndyProofRequestedProofRevealedAttr: {
    /**
     * @description Encoded value
     * @example -1
     */
    readonly encoded?: Date;
    /** @description Raw value */
    readonly raw?: string;
    /**
     * Format: int32
     * @description Sub-proof index
     */
    readonly sub_proof_index?: number;
  };
  readonly IndyProofRequestedProofRevealedAttrGroup: {
    /**
     * Format: int32
     * @description Sub-proof index
     */
    readonly sub_proof_index?: number;
    /** @description Indy proof requested proof revealed attr groups group value */
    readonly values?: { readonly [key: string]: definitions['RawEncoded'] };
  };
  readonly IndyRequestedCredsRequestedAttr: {
    /**
     * @description Wallet credential identifier (typically but not necessarily a UUID)
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly cred_id: string;
    /** @description Whether to reveal attribute in proof (default true) */
    readonly revealed?: boolean;
  };
  readonly IndyRequestedCredsRequestedPred: {
    /**
     * @description Wallet credential identifier (typically but not necessarily a UUID)
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly cred_id: string;
    /**
     * Format: int32
     * @description Epoch timestamp of interest for non-revocation proof
     * @example 1640995199
     */
    readonly timestamp?: number;
  };
  readonly IndyRevRegDef: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly credDefId?: string;
    /**
     * @description Indy revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    readonly id?: string;
    /**
     * @description Revocation registry type (specify CL_ACCUM)
     * @example CL_ACCUM
     * @enum {string}
     */
    readonly revocDefType?: 'CL_ACCUM';
    /** @description Revocation registry tag */
    readonly tag?: string;
    /** @description Revocation registry definition value */
    readonly value?: definitions['IndyRevRegDefValue'];
    /**
     * @description Version of revocation registry definition
     * @example 1.0
     */
    readonly ver?: string;
  };
  readonly IndyRevRegDefValue: {
    /**
     * @description Issuance type
     * @enum {string}
     */
    readonly issuanceType?: 'ISSUANCE_ON_DEMAND' | 'ISSUANCE_BY_DEFAULT';
    /**
     * Format: int32
     * @description Maximum number of credentials; registry size
     * @example 10
     */
    readonly maxCredNum?: number;
    /** @description Public keys */
    readonly publicKeys?: definitions['IndyRevRegDefValuePublicKeys'];
    /**
     * @description Tails hash value
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    readonly tailsHash?: string;
    /** @description Tails file location */
    readonly tailsLocation?: string;
  };
  readonly IndyRevRegDefValuePublicKeys: {
    readonly accumKey?: definitions['IndyRevRegDefValuePublicKeysAccumKey'];
  };
  readonly IndyRevRegDefValuePublicKeysAccumKey: {
    /**
     * @description Value for z
     * @example 1 120F522F81E6B7 1 09F7A59005C4939854
     */
    readonly z?: string;
  };
  readonly IndyRevRegEntry: {
    /** @description Revocation registry entry value */
    readonly value?: definitions['IndyRevRegEntryValue'];
    /**
     * @description Version of revocation registry entry
     * @example 1.0
     */
    readonly ver?: string;
  };
  readonly IndyRevRegEntryValue: {
    /**
     * @description Accumulator value
     * @example 21 11792B036AED0AAA12A4 4 298B2571FFC63A737
     */
    readonly accum?: string;
    /**
     * @description Previous accumulator value
     * @example 21 137AC810975E4 6 76F0384B6F23
     */
    readonly prevAccum?: string;
    /** @description Revoked credential revocation identifiers */
    readonly revoked?: readonly number[];
  };
  readonly InputDescriptors: {
    readonly constraints?: definitions['Constraints'];
    readonly group?: readonly string[];
    /** @description ID */
    readonly id?: string;
    /** @description Metadata dictionary */
    readonly metadata?: { readonly [key: string]: unknown };
    /** @description Name */
    readonly name?: string;
    /** @description Purpose */
    readonly purpose?: string;
    /**
     * @description Accepts a list of schema or a dict containing filters like oneof_filter.
     * @example [object Object]
     */
    readonly schema?: definitions['SchemasInputDescriptorFilter'];
  };
  readonly IntroModuleResponse: { readonly [key: string]: unknown };
  readonly InvitationCreateRequest: {
    /**
     * @description Alias for connection
     * @example Barry
     */
    readonly alias?: string;
    /** @description Optional invitation attachments */
    readonly attachments?: readonly definitions['AttachmentDef'][];
    readonly handshake_protocols?: readonly string[];
    /**
     * @description Identifier for active mediation record to be used
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly mediation_id?: string;
    /** @description Optional metadata to attach to the connection created with the invitation */
    readonly metadata?: { readonly [key: string]: unknown };
    /**
     * @description Label for connection invitation
     * @example Invitation to Barry
     */
    readonly my_label?: string;
    /** @description Whether to use public DID in invitation */
    readonly use_public_did?: boolean;
  };
  readonly InvitationMessage: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    readonly handshake_protocols?: readonly string[];
    /**
     * @description Optional label
     * @example Bob
     */
    readonly label?: string;
    /** @description Optional request attachment */
    readonly 'requests~attach'?: readonly definitions['AttachDecorator'][];
    /** @example [object Object],did:sov:WgWxqztrNooG92RXvxSTWv */
    readonly services?: readonly unknown[];
  };
  readonly InvitationRecord: {
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    /**
     * @description Invitation message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly invi_msg_id?: string;
    /** @description Out of band invitation message */
    readonly invitation?: definitions['InvitationMessage'];
    /**
     * @description Invitation record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly invitation_id?: string;
    /**
     * @description Invitation message URL
     * @example https://example.com/endpoint?c_i=eyJAdHlwZSI6ICIuLi4iLCAiLi4uIjogIi4uLiJ9XX0=
     */
    readonly invitation_url?: string;
    /**
     * @description Out of band message exchange state
     * @example await_response
     */
    readonly state?: string;
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
  };
  readonly InvitationResult: {
    /**
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id?: string;
    readonly invitation?: definitions['ConnectionInvitation'];
    /**
     * @description Invitation URL
     * @example http://192.168.56.101:8020/invite?c_i=eyJAdHlwZSI6Li4ufQ==
     */
    readonly invitation_url?: string;
  };
  readonly IssueCredentialModuleResponse: { readonly [key: string]: unknown };
  readonly IssuerCredRevRecord: {
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly cred_def_id?: string;
    /**
     * @description Credential exchange record identifier at credential issue
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly cred_ex_id?: string;
    /**
     * @description Credential revocation identifier
     * @example 12345
     */
    readonly cred_rev_id?: Date;
    /**
     * @description Issuer credential revocation record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly record_id?: string;
    /**
     * @description Revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    readonly rev_reg_id?: string;
    /**
     * @description Issue credential revocation record state
     * @example issued
     */
    readonly state?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
  };
  readonly IssuerRevRegRecord: {
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly cred_def_id?: string;
    /**
     * @description Error message
     * @example Revocation registry undefined
     */
    readonly error_msg?: string;
    /**
     * @description Issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly issuer_did?: string;
    /**
     * Format: int32
     * @description Maximum number of credentials for revocation registry
     * @example 1000
     */
    readonly max_cred_num?: number;
    /** @description Credential revocation identifier for credential revoked and pending publication to ledger */
    readonly pending_pub?: readonly string[];
    /**
     * @description Issuer revocation registry record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly record_id?: string;
    /**
     * @description Revocation registry type (specify CL_ACCUM)
     * @example CL_ACCUM
     * @enum {string}
     */
    readonly revoc_def_type?: 'CL_ACCUM';
    /** @description Revocation registry definition */
    readonly revoc_reg_def?: definitions['IndyRevRegDef'];
    /** @description Revocation registry entry */
    readonly revoc_reg_entry?: definitions['IndyRevRegEntry'];
    /**
     * @description Revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    readonly revoc_reg_id?: string;
    /**
     * @description Issue revocation registry record state
     * @example active
     */
    readonly state?: string;
    /** @description Tag within issuer revocation registry identifier */
    readonly tag?: string;
    /**
     * @description Tails hash
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    readonly tails_hash?: string;
    /** @description Local path to tails file */
    readonly tails_local_path?: string;
    /** @description Public URI for tails file */
    readonly tails_public_uri?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
  };
  readonly Keylist: {
    /** @description List of keylist records */
    readonly results?: readonly definitions['RouteRecord'][];
  };
  readonly KeylistQuery: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /**
     * @description Query dictionary object
     * @example [object Object]
     */
    readonly filter?: { readonly [key: string]: unknown };
    /** @description Pagination info */
    readonly paginate?: definitions['KeylistQueryPaginate'];
  };
  readonly KeylistQueryFilterRequest: {
    /** @description Filter for keylist query */
    readonly filter?: { readonly [key: string]: unknown };
  };
  readonly KeylistQueryPaginate: {
    /**
     * Format: int32
     * @description Limit for keylist query
     * @example 30
     */
    readonly limit?: number;
    /**
     * Format: int32
     * @description Offset value for query
     */
    readonly offset?: number;
  };
  readonly KeylistUpdate: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /** @description List of update rules */
    readonly updates?: readonly definitions['KeylistUpdateRule'][];
  };
  readonly KeylistUpdateRequest: {
    readonly updates?: readonly definitions['KeylistUpdateRule'][];
  };
  readonly KeylistUpdateRule: {
    /**
     * @description Action for specific key
     * @example add
     * @enum {string}
     */
    readonly action: 'add' | 'remove';
    /**
     * @description Key to remove or add
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    readonly recipient_key: string;
  };
  readonly LDProofVCDetail: {
    /**
     * @description Detail of the JSON-LD Credential to be issued
     * @example [object Object]
     */
    readonly credential: definitions['Credential'];
    /**
     * @description Options for specifying how the linked data proof is created.
     * @example [object Object]
     */
    readonly options: definitions['LDProofVCDetailOptions'];
  };
  readonly LDProofVCDetailOptions: {
    /**
     * @description A challenge to include in the proof. SHOULD be provided by the requesting party of the credential (=holder)
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly challenge?: string;
    /**
     * @description The date and time of the proof (with a maximum accuracy in seconds). Defaults to current system time
     * @example 2021-12-31T23:59:59Z
     */
    readonly created?: Date;
    /** @description The credential status mechanism to use for the credential. Omitting the property indicates the issued credential will not include a credential status */
    readonly credentialStatus?: definitions['CredentialStatusOptions'];
    /**
     * @description The intended domain of validity for the proof
     * @example example.com
     */
    readonly domain?: string;
    /**
     * @description The proof purpose used for the proof. Should match proof purposes registered in the Linked Data Proofs Specification
     * @example assertionMethod
     */
    readonly proofPurpose?: string;
    /**
     * @description The proof type used for the proof. Should match suites registered in the Linked Data Cryptographic Suite Registry
     * @example Ed25519Signature2018
     */
    readonly proofType: string;
  };
  readonly LedgerConfigInstance: {
    /** @description genesis_file */
    readonly genesis_file?: string;
    /** @description genesis_transactions */
    readonly genesis_transactions?: string;
    /** @description genesis_url */
    readonly genesis_url?: string;
    /** @description ledger_id */
    readonly id?: string;
    /** @description is_production */
    readonly is_production?: boolean;
  };
  readonly LedgerConfigList: {
    readonly ledger_config_list: readonly definitions['LedgerConfigInstance'][];
  };
  readonly LedgerModulesResult: { readonly [key: string]: unknown };
  readonly LinkedDataProof: {
    /**
     * @description Associates a challenge with a proof, for use with a proofPurpose such as authentication
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly challenge?: string;
    /**
     * @description The string value of an ISO8601 combined date and time string generated by the Signature Algorithm
     * @example 2021-12-31T23:59:59Z
     */
    readonly created: Date;
    /**
     * @description A string value specifying the restricted domain of the signature.
     * @example example.com
     */
    readonly domain?: string;
    /**
     * @description Associates a Detached Json Web Signature with a proof
     * @example eyJhbGciOiAiRWREUc2UsICJjcml0IjogWyJiNjQiXX0..lKJU0Df_keblRKhZAS9Qq6zybm-HqUXNVZ8vgEPNTAjQ1Ch6YBKY7UBAjg6iBX5qBQ
     */
    readonly jws?: string;
    /**
     * @description The nonce
     * @example CF69iO3nfvqRsRBNElE8b4wO39SyJHPM7Gg1nExltW5vSfQA1lvDCR/zXX1To0/4NLo==
     */
    readonly nonce?: string;
    /**
     * @description Proof purpose
     * @example assertionMethod
     */
    readonly proofPurpose: string;
    /**
     * @description The proof value of a proof
     * @example sy1AahqbzJQ63n9RtekmwzqZeVj494VppdAVJBnMYrTwft6cLJJGeTSSxCCJ6HKnRtwE7jjDh6sB2z2AAiZY9BBnCD8wUVgwqH3qchGRCuC2RugA4eQ9fUrR4Yuycac3caiaaay
     */
    readonly proofValue?: string;
    /**
     * @description Identifies the digital signature suite that was used to create the signature
     * @example Ed25519Signature2018
     */
    readonly type: string;
    /**
     * @description Information used for proof verification
     * @example did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL
     */
    readonly verificationMethod: string;
  };
  readonly MediationCreateRequest: {
    /** @description List of mediator rules for recipient */
    readonly mediator_terms?: readonly string[];
    /** @description List of recipient rules for mediation */
    readonly recipient_terms?: readonly string[];
  };
  readonly MediationDeny: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    readonly mediator_terms?: readonly string[];
    readonly recipient_terms?: readonly string[];
  };
  readonly MediationGrant: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /**
     * @description endpoint on which messages destined for the recipient are received.
     * @example http://192.168.56.102:8020/
     */
    readonly endpoint?: string;
    readonly routing_keys?: readonly string[];
  };
  readonly MediationList: {
    /** @description List of mediation records */
    readonly results?: readonly definitions['MediationRecord'][];
  };
  readonly MediationRecord: {
    readonly connection_id: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    readonly endpoint?: string;
    readonly mediation_id?: string;
    readonly mediator_terms?: readonly string[];
    readonly recipient_terms?: readonly string[];
    readonly role: string;
    readonly routing_keys?: readonly string[];
    /**
     * @description Current record state
     * @example active
     */
    readonly state?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
  };
  readonly Menu: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /**
     * @description Introductory text for the menu
     * @example This menu presents options
     */
    readonly description?: string;
    /**
     * @description An optional error message to display in menu header
     * @example Error: item not found
     */
    readonly errormsg?: string;
    /** @description List of menu options */
    readonly options: readonly definitions['MenuOption'][];
    /**
     * @description Menu title
     * @example My Menu
     */
    readonly title?: string;
  };
  readonly MenuForm: {
    /**
     * @description Additional descriptive text for menu form
     * @example Window preference settings
     */
    readonly description?: string;
    /** @description List of form parameters */
    readonly params?: readonly definitions['MenuFormParam'][];
    /**
     * @description Alternative label for form submit button
     * @example Send
     */
    readonly 'submit-label'?: string;
    /**
     * @description Menu form title
     * @example Preferences
     */
    readonly title?: string;
  };
  readonly MenuFormParam: {
    /**
     * @description Default parameter value
     * @example 0
     */
    readonly default?: Date;
    /**
     * @description Additional descriptive text for menu form parameter
     * @example Delay in seconds before starting
     */
    readonly description?: string;
    /**
     * @description Menu parameter name
     * @example delay
     */
    readonly name: string;
    /**
     * @description Whether parameter is required
     * @example False
     */
    readonly required?: boolean;
    /**
     * @description Menu parameter title
     * @example Delay in seconds
     */
    readonly title: string;
    /**
     * @description Menu form parameter input type
     * @example int
     */
    readonly type?: string;
  };
  readonly MenuJson: {
    /**
     * @description Introductory text for the menu
     * @example User preferences for window settings
     */
    readonly description?: string;
    /**
     * @description Optional error message to display in menu header
     * @example Error: item not present
     */
    readonly errormsg?: string;
    /** @description List of menu options */
    readonly options: readonly definitions['MenuOption'][];
    /**
     * @description Menu title
     * @example My Menu
     */
    readonly title?: string;
  };
  readonly MenuOption: {
    /**
     * @description Additional descriptive text for menu option
     * @example Window display preferences
     */
    readonly description?: string;
    /**
     * @description Whether to show option as disabled
     * @example False
     */
    readonly disabled?: boolean;
    readonly form?: definitions['MenuForm'];
    /**
     * @description Menu option name (unique identifier)
     * @example window_prefs
     */
    readonly name: string;
    /**
     * @description Menu option title
     * @example Window Preferences
     */
    readonly title: string;
  };
  readonly PerformRequest: {
    /**
     * @description Menu option name
     * @example Query
     */
    readonly name?: string;
    /** @description Input parameter values */
    readonly params?: { readonly [key: string]: string };
  };
  readonly PingRequest: {
    /** @description Comment for the ping message */
    readonly comment?: string;
  };
  readonly PingRequestResponse: {
    /** @description Thread ID of the ping message */
    readonly thread_id?: string;
  };
  readonly PresentationDefinition: {
    readonly format?: definitions['ClaimFormat'];
    /**
     * @description Unique Resource Identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly id?: string;
    readonly input_descriptors?: readonly definitions['InputDescriptors'][];
    /** @description Human-friendly name that describes what the presentation definition pertains to */
    readonly name?: string;
    /** @description Describes the purpose for which the Presentation Definition's inputs are being requested */
    readonly purpose?: string;
    readonly submission_requirements?: readonly definitions['SubmissionRequirements'][];
  };
  readonly PresentationProposal: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /** @description Human-readable comment */
    readonly comment?: string;
    readonly presentation_proposal: definitions['IndyPresPreview'];
  };
  readonly PresentationRequest: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /** @description Human-readable comment */
    readonly comment?: string;
    readonly 'request_presentations~attach': readonly definitions['AttachDecorator'][];
  };
  readonly ProtocolDescriptor: {
    readonly pid: string;
    /** @description List of roles */
    readonly roles?: readonly string[];
  };
  readonly PublishRevocations: {
    /** @description Credential revocation ids by revocation registry id */
    readonly rrid2crid?: { readonly [key: string]: readonly Date[] };
  };
  readonly Queries: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    readonly queries?: readonly definitions['QueryItem'][];
  };
  readonly Query: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    readonly comment?: string;
    readonly query: string;
  };
  readonly QueryItem: {
    /**
     * @description feature type
     * @enum {string}
     */
    readonly 'feature-type': 'protocol' | 'goal-code';
    /** @description match */
    readonly match: string;
  };
  readonly RawEncoded: {
    /**
     * @description Encoded value
     * @example -1
     */
    readonly encoded?: Date;
    /** @description Raw value */
    readonly raw?: string;
  };
  readonly ReceiveInvitationRequest: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /**
     * @description DID for connection invitation
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly did?: string;
    /**
     * Format: url
     * @description Optional image URL for connection invitation
     * @example http://192.168.56.101/img/logo.jpg
     */
    readonly imageUrl?: string;
    /**
     * @description Optional label for connection invitation
     * @example Bob
     */
    readonly label?: string;
    /** @description List of recipient keys */
    readonly recipientKeys?: readonly string[];
    /** @description List of routing keys */
    readonly routingKeys?: readonly string[];
    /**
     * @description Service endpoint at which to reach this agent
     * @example http://192.168.56.101:8020
     */
    readonly serviceEndpoint?: string;
  };
  readonly ResolutionResult: {
    /** @description DID Document */
    readonly did_doc: { readonly [key: string]: unknown };
    /** @description Resolution metadata */
    readonly metadata: { readonly [key: string]: unknown };
  };
  readonly RevRegCreateRequest: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly credential_definition_id?: string;
    /**
     * Format: int32
     * @description Revocation registry size
     * @example 1000
     */
    readonly max_cred_num?: number;
  };
  readonly RevRegIssuedResult: {
    /**
     * Format: int32
     * @description Number of credentials issued against revocation registry
     */
    readonly result?: number;
  };
  readonly RevRegResult: {
    readonly result?: definitions['IssuerRevRegRecord'];
  };
  readonly RevRegUpdateTailsFileUri: {
    /**
     * Format: url
     * @description Public URI to the tails file
     * @example http://192.168.56.133:6543/revocation/registry/WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0/tails-file
     */
    readonly tails_public_uri: string;
  };
  readonly RevRegsCreated: {
    readonly rev_reg_ids?: readonly string[];
  };
  readonly RevocationModuleResponse: { readonly [key: string]: unknown };
  readonly RevokeRequest: {
    /** @description Optional comment to include in revocation notification */
    readonly comment?: string;
    /**
     * @description Connection ID to which the revocation notification will be sent; required if notify is true
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id?: string;
    /**
     * @description Credential exchange identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly cred_ex_id?: string;
    /**
     * @description Credential revocation identifier
     * @example 12345
     */
    readonly cred_rev_id?: Date;
    /** @description Send a notification to the credential recipient */
    readonly notify?: boolean;
    /** @description (True) publish revocation to ledger immediately, or (default, False) mark it pending */
    readonly publish?: boolean;
    /**
     * @description Revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    readonly rev_reg_id?: string;
    /** @description Thread ID of the credential exchange message thread resulting in the credential now being revoked; required if notify is true */
    readonly thread_id?: string;
  };
  readonly RouteRecord: {
    readonly connection_id?: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    readonly recipient_key: string;
    readonly record_id?: string;
    readonly role?: string;
    /**
     * @description Current record state
     * @example active
     */
    readonly state?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
    readonly wallet_id?: string;
  };
  readonly Schema: {
    /** @description Schema attribute names */
    readonly attrNames?: readonly string[];
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    readonly id?: string;
    /**
     * @description Schema name
     * @example schema_name
     */
    readonly name?: string;
    /**
     * Format: int32
     * @description Schema sequence number
     * @example 10
     */
    readonly seqNo?: number;
    /**
     * @description Node protocol version
     * @example 1.0
     */
    readonly ver?: string;
    /**
     * @description Schema version
     * @example 1.0
     */
    readonly version?: string;
  };
  readonly SchemaGetResult: {
    readonly schema?: definitions['Schema'];
  };
  readonly SchemaInputDescriptor: {
    /** @description Required */
    readonly required?: boolean;
    /** @description URI */
    readonly uri?: string;
  };
  readonly SchemaSendRequest: {
    /** @description List of schema attributes */
    readonly attributes: readonly string[];
    /**
     * @description Schema name
     * @example prefs
     */
    readonly schema_name: string;
    /**
     * @description Schema version
     * @example 1.0
     */
    readonly schema_version: string;
  };
  readonly SchemaSendResult: {
    /** @description Schema definition */
    readonly schema?: definitions['Schema'];
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    readonly schema_id: string;
  };
  readonly SchemasCreatedResult: {
    readonly schema_ids?: readonly string[];
  };
  readonly SchemasInputDescriptorFilter: {
    /** @description oneOf */
    readonly oneof_filter?: boolean;
    readonly uri_groups?: readonly (readonly definitions['SchemaInputDescriptor'][])[];
  };
  readonly SendMenu: {
    /** @description Menu to send to connection */
    readonly menu: definitions['MenuJson'];
  };
  readonly SendMessage: {
    /**
     * @description Message content
     * @example Hello
     */
    readonly content?: string;
  };
  readonly SignRequest: {
    readonly doc: definitions['Doc'];
    /** @description Verkey to use for signing */
    readonly verkey: string;
  };
  readonly SignResponse: {
    /** @description Error text */
    readonly error?: string;
    /** @description Signed document */
    readonly signed_doc?: { readonly [key: string]: unknown };
  };
  readonly SignatureOptions: {
    readonly challenge?: string;
    readonly domain?: string;
    readonly proofPurpose: string;
    readonly type?: string;
    readonly verificationMethod: string;
  };
  readonly SignedDoc: {
    /** @description Linked data proof */
    readonly proof: definitions['SignatureOptions'];
  };
  readonly SubmissionRequirements: {
    /**
     * Format: int32
     * @description Count Value
     * @example 1234
     */
    readonly count?: number;
    /** @description From */
    readonly from?: string;
    readonly from_nested?: readonly definitions['SubmissionRequirements'][];
    /**
     * Format: int32
     * @description Max Value
     * @example 1234
     */
    readonly max?: number;
    /**
     * Format: int32
     * @description Min Value
     * @example 1234
     */
    readonly min?: number;
    /** @description Name */
    readonly name?: string;
    /** @description Purpose */
    readonly purpose?: string;
    /**
     * @description Selection
     * @enum {string}
     */
    readonly rule?: 'all' | 'pick';
  };
  readonly TAAAccept: {
    readonly mechanism?: string;
    readonly text?: string;
    readonly version?: string;
  };
  readonly TAAAcceptance: {
    readonly mechanism?: string;
    /**
     * Format: int32
     * @example 1640995199
     */
    readonly time?: number;
  };
  readonly TAAInfo: {
    readonly aml_record?: definitions['AMLRecord'];
    readonly taa_accepted?: definitions['TAAAcceptance'];
    readonly taa_record?: definitions['TAARecord'];
    readonly taa_required?: boolean;
  };
  readonly TAARecord: {
    readonly digest?: string;
    readonly text?: string;
    readonly version?: string;
  };
  readonly TAAResult: {
    readonly result?: definitions['TAAInfo'];
  };
  readonly TransactionJobs: {
    /**
     * @description My transaction related job
     * @enum {string}
     */
    readonly transaction_my_job?:
      | 'TRANSACTION_AUTHOR'
      | 'TRANSACTION_ENDORSER'
      | 'reset';
    /**
     * @description Their transaction related job
     * @enum {string}
     */
    readonly transaction_their_job?:
      | 'TRANSACTION_AUTHOR'
      | 'TRANSACTION_ENDORSER'
      | 'reset';
  };
  readonly TransactionList: {
    /** @description List of transaction records */
    readonly results?: readonly definitions['TransactionRecord'][];
  };
  readonly TransactionRecord: {
    /**
     * @description Transaction type
     * @example 101
     */
    readonly _type?: Date;
    /**
     * @description The connection identifier for thie particular transaction record
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id?: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    /**
     * @description If True, Endorser will write the transaction after endorsing it
     * @example true
     */
    readonly endorser_write_txn?: boolean;
    readonly formats?: readonly { readonly [key: string]: string }[];
    readonly messages_attach?: readonly { readonly [key: string]: unknown }[];
    /** @example [object Object] */
    readonly meta_data?: { readonly [key: string]: unknown };
    readonly signature_request?: readonly { readonly [key: string]: unknown }[];
    readonly signature_response?: readonly {
      readonly [key: string]: unknown;
    }[];
    /**
     * @description Current record state
     * @example active
     */
    readonly state?: string;
    /**
     * @description Thread Identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly thread_id?: string;
    /** @example [object Object] */
    readonly timing?: { readonly [key: string]: unknown };
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
    /**
     * @description Transaction identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly transaction_id?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
  };
  readonly TxnOrCredentialDefinitionSendResult: {
    readonly sent?: definitions['CredentialDefinitionSendResult'];
    /** @description Credential definition transaction to endorse */
    readonly txn?: definitions['TransactionRecord'];
  };
  readonly TxnOrPublishRevocationsResult: {
    readonly sent?: definitions['PublishRevocations'];
    /** @description Revocation registry revocations transaction to endorse */
    readonly txn?: definitions['TransactionRecord'];
  };
  readonly TxnOrRegisterLedgerNymResponse: {
    /**
     * @description Success of nym registration operation
     * @example true
     */
    readonly success?: boolean;
    /** @description DID transaction to endorse */
    readonly txn?: definitions['TransactionRecord'];
  };
  readonly TxnOrRevRegResult: {
    readonly sent?: definitions['RevRegResult'];
    /** @description Revocation registry definition transaction to endorse */
    readonly txn?: definitions['TransactionRecord'];
  };
  readonly TxnOrSchemaSendResult: {
    /** @description Content sent */
    readonly sent?: definitions['SchemaSendResult'];
    /** @description Schema transaction to endorse */
    readonly txn?: definitions['TransactionRecord'];
  };
  readonly V10CredentialBoundOfferRequest: {
    /** @description Optional counter-proposal */
    readonly counter_proposal?: definitions['CredentialProposal'];
  };
  readonly V10CredentialConnFreeOfferRequest: {
    /** @description Whether to respond automatically to credential requests, creating and issuing requested credentials */
    readonly auto_issue?: boolean;
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    readonly auto_remove?: boolean;
    /** @description Human-readable comment */
    readonly comment?: string;
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly cred_def_id: string;
    readonly credential_preview: definitions['CredentialPreview'];
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
  };
  readonly V10CredentialCreate: {
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    readonly auto_remove?: boolean;
    /** @description Human-readable comment */
    readonly comment?: string;
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly cred_def_id?: string;
    readonly credential_proposal: definitions['CredentialPreview'];
    /**
     * @description Credential issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly issuer_did?: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    readonly schema_id?: string;
    /**
     * @description Schema issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly schema_issuer_did?: string;
    /**
     * @description Schema name
     * @example preferences
     */
    readonly schema_name?: string;
    /**
     * @description Schema version
     * @example 1.0
     */
    readonly schema_version?: string;
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
  };
  readonly V10CredentialExchange: {
    /** @description Issuer choice to issue to request in this credential exchange */
    readonly auto_issue?: boolean;
    /** @description Holder choice to accept offer in this credential exchange */
    readonly auto_offer?: boolean;
    /** @description Issuer choice to remove this credential exchange record when complete */
    readonly auto_remove?: boolean;
    /**
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id?: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    /** @description Credential as stored */
    readonly credential?: definitions['IndyCredInfo'];
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly credential_definition_id?: string;
    /**
     * @description Credential exchange identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly credential_exchange_id?: string;
    /**
     * @description Credential identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly credential_id?: string;
    /** @description (Indy) credential offer */
    readonly credential_offer?: definitions['IndyCredAbstract'];
    /** @description Credential offer message */
    readonly credential_offer_dict?: definitions['CredentialOffer'];
    /** @description Credential proposal message */
    readonly credential_proposal_dict?: definitions['CredentialProposal'];
    /** @description (Indy) credential request */
    readonly credential_request?: definitions['IndyCredRequest'];
    /** @description (Indy) credential request metadata */
    readonly credential_request_metadata?: { readonly [key: string]: unknown };
    /**
     * @description Error message
     * @example Credential definition identifier is not set in proposal
     */
    readonly error_msg?: string;
    /**
     * @description Issue-credential exchange initiator: self or external
     * @example self
     * @enum {string}
     */
    readonly initiator?: 'self' | 'external';
    /**
     * @description Parent thread identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly parent_thread_id?: string;
    /** @description Credential as received, prior to storage in holder wallet */
    readonly raw_credential?: definitions['IndyCredential'];
    /** @description Revocation registry identifier */
    readonly revoc_reg_id?: string;
    /** @description Credential identifier within revocation registry */
    readonly revocation_id?: string;
    /**
     * @description Issue-credential exchange role: holder or issuer
     * @example issuer
     * @enum {string}
     */
    readonly role?: 'holder' | 'issuer';
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    readonly schema_id?: string;
    /**
     * @description Issue-credential exchange state
     * @example credential_acked
     */
    readonly state?: string;
    /**
     * @description Thread identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly thread_id?: string;
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
  };
  readonly V10CredentialExchangeListResult: {
    /** @description Aries#0036 v1.0 credential exchange records */
    readonly results?: readonly definitions['V10CredentialExchange'][];
  };
  readonly V10CredentialFreeOfferRequest: {
    /** @description Whether to respond automatically to credential requests, creating and issuing requested credentials */
    readonly auto_issue?: boolean;
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    readonly auto_remove?: boolean;
    /** @description Human-readable comment */
    readonly comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id: string;
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly cred_def_id: string;
    readonly credential_preview: definitions['CredentialPreview'];
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
  };
  readonly V10CredentialIssueRequest: {
    /** @description Human-readable comment */
    readonly comment?: string;
  };
  readonly V10CredentialProblemReportRequest: {
    readonly description: string;
  };
  readonly V10CredentialProposalRequestMand: {
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    readonly auto_remove?: boolean;
    /** @description Human-readable comment */
    readonly comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id: string;
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly cred_def_id?: string;
    readonly credential_proposal: definitions['CredentialPreview'];
    /**
     * @description Credential issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly issuer_did?: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    readonly schema_id?: string;
    /**
     * @description Schema issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly schema_issuer_did?: string;
    /**
     * @description Schema name
     * @example preferences
     */
    readonly schema_name?: string;
    /**
     * @description Schema version
     * @example 1.0
     */
    readonly schema_version?: string;
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
  };
  readonly V10CredentialProposalRequestOpt: {
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    readonly auto_remove?: boolean;
    /** @description Human-readable comment */
    readonly comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id: string;
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly cred_def_id?: string;
    readonly credential_proposal?: definitions['CredentialPreview'];
    /**
     * @description Credential issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly issuer_did?: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    readonly schema_id?: string;
    /**
     * @description Schema issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly schema_issuer_did?: string;
    /**
     * @description Schema name
     * @example preferences
     */
    readonly schema_name?: string;
    /**
     * @description Schema version
     * @example 1.0
     */
    readonly schema_version?: string;
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
  };
  readonly V10CredentialStoreRequest: {
    readonly credential_id?: string;
  };
  readonly V10DiscoveryExchangeListResult: {
    readonly results?: readonly definitions['V10DiscoveryRecord'][];
  };
  readonly V10DiscoveryExchangeResult: {
    /** @description Discover Features v1.0 exchange record */
    readonly results?: definitions['V10DiscoveryRecord'];
  };
  readonly V10DiscoveryRecord: {
    /**
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id?: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    /** @description Disclose message */
    readonly disclose?: definitions['Disclose'];
    /**
     * @description Credential exchange identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly discovery_exchange_id?: string;
    /** @description Query message */
    readonly query_msg?: definitions['Query'];
    /**
     * @description Current record state
     * @example active
     */
    readonly state?: string;
    /**
     * @description Thread identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly thread_id?: string;
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
  };
  readonly V10PresentProofModuleResponse: { readonly [key: string]: unknown };
  readonly V10PresentationCreateRequestRequest: {
    /** @description Verifier choice to auto-verify proof presentation */
    readonly auto_verify?: boolean;
    readonly comment?: string;
    readonly proof_request: definitions['IndyProofRequest'];
    /** @description Whether to trace event (default false) */
    readonly trace?: boolean;
  };
  readonly V10PresentationExchange: {
    /** @description Prover choice to auto-present proof as verifier requests */
    readonly auto_present?: boolean;
    /** @description Verifier choice to auto-verify proof presentation */
    readonly auto_verify?: boolean;
    /**
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id?: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    /**
     * @description Error message
     * @example Invalid structure
     */
    readonly error_msg?: string;
    /**
     * @description Present-proof exchange initiator: self or external
     * @example self
     * @enum {string}
     */
    readonly initiator?: 'self' | 'external';
    /** @description (Indy) presentation (also known as proof) */
    readonly presentation?: definitions['IndyProof'];
    /**
     * @description Presentation exchange identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly presentation_exchange_id?: string;
    /** @description Presentation proposal message */
    readonly presentation_proposal_dict?: definitions['PresentationProposal'];
    /** @description (Indy) presentation request (also known as proof request) */
    readonly presentation_request?: definitions['IndyProofRequest'];
    /** @description Presentation request message */
    readonly presentation_request_dict?: definitions['PresentationRequest'];
    /**
     * @description Present-proof exchange role: prover or verifier
     * @example prover
     * @enum {string}
     */
    readonly role?: 'prover' | 'verifier';
    /**
     * @description Present-proof exchange state
     * @example verified
     */
    readonly state?: string;
    /**
     * @description Thread identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly thread_id?: string;
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
    /**
     * @description Whether presentation is verified: true or false
     * @example true
     * @enum {string}
     */
    readonly verified?: 'true' | 'false';
  };
  readonly V10PresentationExchangeList: {
    /** @description Aries RFC 37 v1.0 presentation exchange records */
    readonly results?: readonly definitions['V10PresentationExchange'][];
  };
  readonly V10PresentationProblemReportRequest: {
    readonly description: string;
  };
  readonly V10PresentationProposalRequest: {
    /** @description Whether to respond automatically to presentation requests, building and presenting requested proof */
    readonly auto_present?: boolean;
    /** @description Human-readable comment */
    readonly comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id: string;
    readonly presentation_proposal: definitions['IndyPresPreview'];
    /** @description Whether to trace event (default false) */
    readonly trace?: boolean;
  };
  readonly V10PresentationSendRequestRequest: {
    /** @description Verifier choice to auto-verify proof presentation */
    readonly auto_verify?: boolean;
    readonly comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id: string;
    readonly proof_request: definitions['IndyProofRequest'];
    /** @description Whether to trace event (default false) */
    readonly trace?: boolean;
  };
  readonly V10PresentationSendRequestToProposal: {
    /** @description Verifier choice to auto-verify proof presentation */
    readonly auto_verify?: boolean;
    /** @description Whether to trace event (default false) */
    readonly trace?: boolean;
  };
  readonly V20CredAttrSpec: {
    /**
     * @description MIME type: omit for (null) default
     * @example image/jpeg
     */
    readonly 'mime-type'?: string;
    /**
     * @description Attribute name
     * @example favourite_drink
     */
    readonly name: string;
    /**
     * @description Attribute value: base64-encode if MIME type is present
     * @example martini
     */
    readonly value: string;
  };
  readonly V20CredBoundOfferRequest: {
    /** @description Optional content for counter-proposal */
    readonly counter_preview?: definitions['V20CredPreview'];
    /** @description Credential specification criteria by format */
    readonly filter?: definitions['V20CredFilter'];
  };
  readonly V20CredExFree: {
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    readonly auto_remove?: boolean;
    /** @description Human-readable comment */
    readonly comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id: string;
    readonly credential_preview?: definitions['V20CredPreview'];
    /** @description Credential specification criteria by format */
    readonly filter: definitions['V20CredFilter'];
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
  };
  readonly V20CredExRecord: {
    /** @description Issuer choice to issue to request in this credential exchange */
    readonly auto_issue?: boolean;
    /** @description Holder choice to accept offer in this credential exchange */
    readonly auto_offer?: boolean;
    /** @description Issuer choice to remove this credential exchange record when complete */
    readonly auto_remove?: boolean;
    /** @description Attachment content by format for proposal, offer, request, and issue */
    readonly by_format?: definitions['V20CredExRecordByFormat'];
    /**
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id?: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    /**
     * @description Credential exchange identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly cred_ex_id?: string;
    /** @description Serialized credential issue message */
    readonly cred_issue?: definitions['V20CredIssue'];
    /** @description Credential offer message */
    readonly cred_offer?: definitions['V20CredOffer'];
    /** @description Credential preview from credential proposal */
    readonly cred_preview?: definitions['V20CredPreview'];
    /** @description Credential proposal message */
    readonly cred_proposal?: definitions['V20CredProposal'];
    /** @description Serialized credential request message */
    readonly cred_request?: definitions['V20CredRequest'];
    /**
     * @description Error message
     * @example The front fell off
     */
    readonly error_msg?: string;
    /**
     * @description Issue-credential exchange initiator: self or external
     * @example self
     * @enum {string}
     */
    readonly initiator?: 'self' | 'external';
    /**
     * @description Parent thread identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly parent_thread_id?: string;
    /**
     * @description Issue-credential exchange role: holder or issuer
     * @example issuer
     * @enum {string}
     */
    readonly role?: 'issuer' | 'holder';
    /**
     * @description Issue-credential exchange state
     * @example done
     * @enum {string}
     */
    readonly state?:
      | 'proposal-sent'
      | 'proposal-received'
      | 'offer-sent'
      | 'offer-received'
      | 'request-sent'
      | 'request-received'
      | 'credential-issued'
      | 'credential-received'
      | 'done'
      | 'credential-revoked'
      | 'abandoned';
    /**
     * @description Thread identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly thread_id?: string;
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
  };
  readonly V20CredExRecordByFormat: {
    readonly cred_issue?: { readonly [key: string]: unknown };
    readonly cred_offer?: { readonly [key: string]: unknown };
    readonly cred_proposal?: { readonly [key: string]: unknown };
    readonly cred_request?: { readonly [key: string]: unknown };
  };
  readonly V20CredExRecordDetail: {
    /** @description Credential exchange record */
    readonly cred_ex_record?: definitions['V20CredExRecord'];
    readonly indy?: definitions['V20CredExRecordIndy'];
    readonly ld_proof?: definitions['V20CredExRecordLDProof'];
  };
  readonly V20CredExRecordIndy: {
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    /**
     * @description Corresponding v2.0 credential exchange record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly cred_ex_id?: string;
    /**
     * @description Record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly cred_ex_indy_id?: string;
    /**
     * @description Credential identifier stored in wallet
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly cred_id_stored?: string;
    /** @description Credential request metadata for indy holder */
    readonly cred_request_metadata?: { readonly [key: string]: unknown };
    /**
     * @description Credential revocation identifier within revocation registry
     * @example 12345
     */
    readonly cred_rev_id?: Date;
    /**
     * @description Revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    readonly rev_reg_id?: string;
    /**
     * @description Current record state
     * @example active
     */
    readonly state?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
  };
  readonly V20CredExRecordLDProof: {
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    /**
     * @description Corresponding v2.0 credential exchange record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly cred_ex_id?: string;
    /**
     * @description Record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly cred_ex_ld_proof_id?: string;
    /**
     * @description Credential identifier stored in wallet
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly cred_id_stored?: string;
    /**
     * @description Current record state
     * @example active
     */
    readonly state?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
  };
  readonly V20CredExRecordListResult: {
    /** @description Credential exchange records and corresponding detail records */
    readonly results?: readonly definitions['V20CredExRecordDetail'][];
  };
  readonly V20CredFilter: {
    /** @description Credential filter for indy */
    readonly indy?: definitions['V20CredFilterIndy'];
    /** @description Credential filter for linked data proof */
    readonly ld_proof?: definitions['LDProofVCDetail'];
  };
  readonly V20CredFilterIndy: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    readonly cred_def_id?: string;
    /**
     * @description Credential issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly issuer_did?: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    readonly schema_id?: string;
    /**
     * @description Schema issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    readonly schema_issuer_did?: string;
    /**
     * @description Schema name
     * @example preferences
     */
    readonly schema_name?: string;
    /**
     * @description Schema version
     * @example 1.0
     */
    readonly schema_version?: string;
  };
  readonly V20CredFilterLDProof: {
    /** @description Credential filter for linked data proof */
    readonly ld_proof: definitions['LDProofVCDetail'];
  };
  readonly V20CredFormat: {
    /**
     * @description Attachment identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly attach_id: string;
    /**
     * @description Attachment format specifier
     * @example aries/ld-proof-vc-detail@v1.0
     */
    readonly format: string;
  };
  readonly V20CredIssue: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /** @description Human-readable comment */
    readonly comment?: string;
    /** @description Credential attachments */
    readonly 'credentials~attach': readonly definitions['AttachDecorator'][];
    /** @description Acceptable attachment formats */
    readonly formats: readonly definitions['V20CredFormat'][];
    /**
     * @description Issuer-unique identifier to coordinate credential replacement
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly replacement_id?: string;
  };
  readonly V20CredIssueProblemReportRequest: {
    readonly description: string;
  };
  readonly V20CredIssueRequest: {
    /** @description Human-readable comment */
    readonly comment?: string;
  };
  readonly V20CredOffer: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /** @description Human-readable comment */
    readonly comment?: string;
    readonly credential_preview?: definitions['V20CredPreview'];
    /** @description Acceptable credential formats */
    readonly formats: readonly definitions['V20CredFormat'][];
    /** @description Offer attachments */
    readonly 'offers~attach': readonly definitions['AttachDecorator'][];
    /**
     * @description Issuer-unique identifier to coordinate credential replacement
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly replacement_id?: string;
  };
  readonly V20CredOfferConnFreeRequest: {
    /** @description Whether to respond automatically to credential requests, creating and issuing requested credentials */
    readonly auto_issue?: boolean;
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    readonly auto_remove?: boolean;
    /** @description Human-readable comment */
    readonly comment?: string;
    readonly credential_preview?: definitions['V20CredPreview'];
    /** @description Credential specification criteria by format */
    readonly filter: definitions['V20CredFilter'];
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
  };
  readonly V20CredOfferRequest: {
    /** @description Whether to respond automatically to credential requests, creating and issuing requested credentials */
    readonly auto_issue?: boolean;
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    readonly auto_remove?: boolean;
    /** @description Human-readable comment */
    readonly comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id: string;
    readonly credential_preview?: definitions['V20CredPreview'];
    /** @description Credential specification criteria by format */
    readonly filter: definitions['V20CredFilter'];
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
  };
  readonly V20CredPreview: {
    /**
     * @description Message type identifier
     * @example issue-credential/2.0/credential-preview
     */
    readonly '@type'?: string;
    readonly attributes: readonly definitions['V20CredAttrSpec'][];
  };
  readonly V20CredProposal: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /** @description Human-readable comment */
    readonly comment?: string;
    /** @description Credential preview */
    readonly credential_preview?: definitions['V20CredPreview'];
    /** @description Credential filter per acceptable format on corresponding identifier */
    readonly 'filters~attach': readonly definitions['AttachDecorator'][];
    /** @description Attachment formats */
    readonly formats: readonly definitions['V20CredFormat'][];
  };
  readonly V20CredRequest: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /** @description Human-readable comment */
    readonly comment?: string;
    /** @description Acceptable attachment formats */
    readonly formats: readonly definitions['V20CredFormat'][];
    /** @description Request attachments */
    readonly 'requests~attach': readonly definitions['AttachDecorator'][];
  };
  readonly V20CredRequestFree: {
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    readonly auto_remove?: boolean;
    /** @description Human-readable comment */
    readonly comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id: string;
    /** @description Credential specification criteria by format */
    readonly filter: definitions['V20CredFilterLDProof'];
    /**
     * @description Holder DID to substitute for the credentialSubject.id
     * @example did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs
     */
    readonly holder_did?: string;
    /** @description Whether to trace event (default false) */
    readonly trace?: boolean;
  };
  readonly V20CredRequestRequest: {
    /**
     * @description Holder DID to substitute for the credentialSubject.id
     * @example did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs
     */
    readonly holder_did?: string;
  };
  readonly V20CredStoreRequest: {
    readonly credential_id?: string;
  };
  readonly V20DiscoveryExchangeListResult: {
    readonly results?: readonly definitions['V20DiscoveryRecord'][];
  };
  readonly V20DiscoveryExchangeResult: {
    /** @description Discover Features v2.0 exchange record */
    readonly results?: definitions['V20DiscoveryRecord'];
  };
  readonly V20DiscoveryRecord: {
    /**
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id?: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    /** @description Disclosures message */
    readonly disclosures?: definitions['Disclosures'];
    /**
     * @description Credential exchange identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly discovery_exchange_id?: string;
    /** @description Queries message */
    readonly queries_msg?: definitions['Queries'];
    /**
     * @description Current record state
     * @example active
     */
    readonly state?: string;
    /**
     * @description Thread identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly thread_id?: string;
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
  };
  readonly V20IssueCredSchemaCore: {
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    readonly auto_remove?: boolean;
    /** @description Human-readable comment */
    readonly comment?: string;
    readonly credential_preview?: definitions['V20CredPreview'];
    /** @description Credential specification criteria by format */
    readonly filter: definitions['V20CredFilter'];
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
  };
  readonly V20IssueCredentialModuleResponse: {
    readonly [key: string]: unknown;
  };
  readonly V20Pres: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /** @description Human-readable comment */
    readonly comment?: string;
    /** @description Acceptable attachment formats */
    readonly formats: readonly definitions['V20PresFormat'][];
    readonly 'presentations~attach': readonly definitions['AttachDecorator'][];
  };
  readonly V20PresCreateRequestRequest: {
    /** @description Verifier choice to auto-verify proof presentation */
    readonly auto_verify?: boolean;
    readonly comment?: string;
    readonly presentation_request: definitions['V20PresRequestByFormat'];
    /** @description Whether to trace event (default false) */
    readonly trace?: boolean;
  };
  readonly V20PresExRecord: {
    /** @description Prover choice to auto-present proof as verifier requests */
    readonly auto_present?: boolean;
    /** @description Verifier choice to auto-verify proof presentation */
    readonly auto_verify?: boolean;
    /** @description Attachment content by format for proposal, request, and presentation */
    readonly by_format?: definitions['V20PresExRecordByFormat'];
    /**
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id?: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31T23:59:59Z
     */
    readonly created_at?: Date;
    /**
     * @description Error message
     * @example Invalid structure
     */
    readonly error_msg?: string;
    /**
     * @description Present-proof exchange initiator: self or external
     * @example self
     * @enum {string}
     */
    readonly initiator?: 'self' | 'external';
    /** @description Presentation message */
    readonly pres?: definitions['V20Pres'];
    /**
     * @description Presentation exchange identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly pres_ex_id?: string;
    /** @description Presentation proposal message */
    readonly pres_proposal?: definitions['V20PresProposal'];
    /** @description Presentation request message */
    readonly pres_request?: definitions['V20PresRequest'];
    /**
     * @description Present-proof exchange role: prover or verifier
     * @example prover
     * @enum {string}
     */
    readonly role?: 'prover' | 'verifier';
    /**
     * @description Present-proof exchange state
     * @enum {string}
     */
    readonly state?:
      | 'proposal-sent'
      | 'proposal-received'
      | 'request-sent'
      | 'request-received'
      | 'presentation-sent'
      | 'presentation-received'
      | 'done'
      | 'abandoned';
    /**
     * @description Thread identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly thread_id?: string;
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
    /**
     * @description Time of last record update
     * @example 2021-12-31T23:59:59Z
     */
    readonly updated_at?: Date;
    /**
     * @description Whether presentation is verified: 'true' or 'false'
     * @example true
     * @enum {string}
     */
    readonly verified?: 'true' | 'false';
  };
  readonly V20PresExRecordByFormat: {
    readonly pres?: { readonly [key: string]: unknown };
    readonly pres_proposal?: { readonly [key: string]: unknown };
    readonly pres_request?: { readonly [key: string]: unknown };
  };
  readonly V20PresExRecordList: {
    /** @description Presentation exchange records */
    readonly results?: readonly definitions['V20PresExRecord'][];
  };
  readonly V20PresFormat: {
    /**
     * @description Attachment identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly attach_id: string;
    /**
     * @description Attachment format specifier
     * @example dif/presentation-exchange/submission@v1.0
     */
    readonly format: string;
  };
  readonly V20PresProblemReportRequest: {
    readonly description: string;
  };
  readonly V20PresProposal: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /** @description Human-readable comment */
    readonly comment?: string;
    readonly formats: readonly definitions['V20PresFormat'][];
    /** @description Attachment per acceptable format on corresponding identifier */
    readonly 'proposals~attach': readonly definitions['AttachDecorator'][];
  };
  readonly V20PresProposalByFormat: {
    /** @description Presentation proposal for DIF */
    readonly dif?: definitions['DIFProofProposal'];
    /** @description Presentation proposal for indy */
    readonly indy?: definitions['IndyProofRequest'];
  };
  readonly V20PresProposalRequest: {
    /** @description Whether to respond automatically to presentation requests, building and presenting requested proof */
    readonly auto_present?: boolean;
    /** @description Human-readable comment */
    readonly comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id: string;
    readonly presentation_proposal: definitions['V20PresProposalByFormat'];
    /** @description Whether to trace event (default false) */
    readonly trace?: boolean;
  };
  readonly V20PresRequest: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly '@id'?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    readonly '@type'?: string;
    /** @description Human-readable comment */
    readonly comment?: string;
    readonly formats: readonly definitions['V20PresFormat'][];
    /** @description Attachment per acceptable format on corresponding identifier */
    readonly 'request_presentations~attach': readonly definitions['AttachDecorator'][];
    /** @description Whether verifier will send confirmation ack */
    readonly will_confirm?: boolean;
  };
  readonly V20PresRequestByFormat: {
    /** @description Presentation request for DIF */
    readonly dif?: definitions['DIFProofRequest'];
    /** @description Presentation request for indy */
    readonly indy?: definitions['IndyProofRequest'];
  };
  readonly V20PresSendRequestRequest: {
    /** @description Verifier choice to auto-verify proof presentation */
    readonly auto_verify?: boolean;
    /** @description  If presentation proof is removed automatically afterwards */
    readonly auto_remove?: boolean;
    readonly comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly connection_id: string;
    readonly presentation_request: definitions['V20PresRequestByFormat'];
    /** @description Whether to trace event (default false) */
    readonly trace?: boolean;
  };
  readonly V20PresSpecByFormatRequest: {
    /** @description Optional Presentation specification for DIF, overrides the PresentionExchange record's PresRequest */
    readonly dif?: definitions['DIFPresSpec'];
    /** @description Presentation specification for indy */
    readonly indy?: definitions['IndyPresSpec'];
    /** @description Record trace information, based on agent configuration */
    readonly trace?: boolean;
  };
  readonly V20PresentProofModuleResponse: { readonly [key: string]: unknown };
  readonly V20PresentationSendRequestToProposal: {
    /** @description Verifier choice to auto-verify proof presentation */
    readonly auto_verify?: boolean;
    /** @description Whether to trace event (default false) */
    readonly trace?: boolean;
  };
  readonly VCRecord: {
    readonly contexts?: readonly Date[];
    readonly cred_tags?: { readonly [key: string]: string };
    /** @description (JSON-serializable) credential value */
    readonly cred_value?: { readonly [key: string]: unknown };
    readonly expanded_types?: readonly string[];
    /**
     * @description Credential identifier
     * @example http://example.edu/credentials/3732
     */
    readonly given_id?: Date;
    /**
     * @description Issuer identifier
     * @example https://example.edu/issuers/14
     */
    readonly issuer_id?: string;
    readonly proof_types?: readonly string[];
    /**
     * @description Record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    readonly record_id?: string;
    readonly schema_ids?: readonly string[];
    readonly subject_ids?: readonly string[];
  };
  readonly VCRecordList: {
    readonly results?: readonly definitions['VCRecord'][];
  };
  readonly VerifyRequest: {
    /** @description Signed document */
    readonly doc: definitions['SignedDoc'];
    /** @description Verkey to use for doc verification */
    readonly verkey?: string;
  };
  readonly VerifyResponse: {
    /** @description Error text */
    readonly error?: string;
    readonly valid: boolean;
  };
  readonly W3CCredentialsListRequest: {
    readonly contexts?: readonly Date[];
    /** @description Given credential id to match */
    readonly given_id?: string;
    /** @description Credential issuer identifier to match */
    readonly issuer_id?: string;
    /**
     * Format: int32
     * @description Maximum number of results to return
     */
    readonly max_results?: number;
    readonly proof_types?: readonly string[];
    /** @description Schema identifiers, all of which to match */
    readonly schema_ids?: readonly Date[];
    /** @description Subject identifiers, all of which to match */
    readonly subject_ids?: readonly string[];
    /** @description Tag filter */
    readonly tag_query?: { readonly [key: string]: string };
    readonly types?: readonly Date[];
  };
  readonly WalletModuleResponse: { readonly [key: string]: unknown };
  readonly WriteLedgerRequest: {
    readonly ledger_id?: string;
  };
}

export interface operations {}

export interface external {}
