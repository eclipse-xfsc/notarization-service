---
replicaCount: 2

image:
  repository: ghcr.io/hyperledger/aries-cloudagent-python
  pullPolicy: Always
  tag: "py3.9-0.12.0rc2"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  ports:
    - port: 8030
      targetPort: http
      protocol: TCP
      name: http
    - port: 8031
      targetPort: admin
      protocol: TCP
      name: admin

ingress:
  enabled: true
  certManager: true
  className: ""
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-production-http
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
  hosts:
    - host: test-not.xfsc.dev
      paths:
        - path: "/acapy-holder/(.*)"
          pathType: ImplementationSpecific
          svcPort: 8030
        - path: "/acapy-holder-admin/(.*)"
          pathType: ImplementationSpecific
          svcPort: 8031
  tls:
   - secretName: acapy-not.xfsc.dev-tls
     hosts:
       - test-not.xfsc.dev

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  exec:
    command:
      - /bin/bash
      - -c
      - "curl -A \"acapy-probe\" \"http://localhost:8031/status/live\""
  initialDelaySeconds: 15
  periodSeconds: 30

readinessProbe:
  exec:
    command:
      - /bin/bash
      - -c
      - "curl -A \"acapy-probe\" \"http://localhost:8031/status/ready\""
  initialDelaySeconds: 10
  periodSeconds: 15

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

config:
  postgresqlExistingSecret: "notarization-credentials"
  postgresqlSecretKey: "postgresql-not-api-password"
  postgresqlAdminExistingSecret: "notarization-credentials"
  postgresqlAdminSecretKey: "postgresql-admin-password"
  args:
    - start
    - --endpoint
    - https://test-not.xfsc.dev/acapy-holder/
    - --admin
    - "0.0.0.0"
    - "8031"
    - --admin-insecure-mode
    - --inbound-transport
    - http
    - "0.0.0.0"
    - "8030"
    - --outbound-transport
    - http
    - --no-ledger
    - --seed
    - "000000000000000000000000000User1"
    - --wallet-type
    - askar
    - --wallet-storage-type
    - 'postgres_storage'
    # wallet-name equals the name of the automatically created postgresql database.
    - --wallet-name
    - 'holder'
    - --wallet-key
    - "123"
    - --wallet-storage-config
    - '{"url":"postgres-postgresql.not-api.svc.cluster.local:5432","max_connections":5,"wallet_scheme":"MultiWalletSingleTable"}'
    - --wallet-storage-creds
    # As the databases are created automatically, we also need the pass the credentials of the admin user.
    # In order to pass the env vars to the command line, we need to use parentheses like $(VAR), see:
    # https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#use-environment-variables-to-define-arguments
    - '{"account":"not_api","password":"$(POSTGRES_PASSWORD)","admin_account":"postgres","admin_password":"$(POSTGRES_ADMIN_PASSWORD)"}'
    - --admin-insecure-mode
    - --label
    - Holder
    - --auto-provision
    - --auto-ping-connection
    - --auto-accept-requests
    - --auto-respond-credential-proposal
    - --auto-respond-credential-offer
    - --auto-respond-credential-request
    - --auto-store-credential
    - --auto-respond-presentation-proposal
    - --auto-respond-presentation-request
    - --public-invites
    - --requests-through-public-did
    - --debug-connections
    - --debug-credentials
    - --debug-presentations
    - --log-level
    - debug
